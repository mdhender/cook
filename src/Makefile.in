#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#    W   W    A    RRRR   N   N   III  N   N  III  N   N   GGG
#    W   W   A A   R   R  NN  N    I   NN  N   I   NN  N  G   G
#    W   W  A   A  RRRR   N N N    I   N N N   I   N N N  G
#    W W W  AAAAA  R R    N  NN    I   N  NN   I   N  NN  G  GG
#    W W W  A   A  R  R   N   N    I   N   N   I   N   N  G   G
#     W W   A   A  R   R  N   N   III  N   N  III  N   N   GGG
#
# Warning: DO NOT send patches which fix this file.  IT IS NOT
# the original source file.  This file is GENERATED from the
# Aegis repository file manifest.  If you find a bug in this
# file, it could well be an Aegis bug.
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# @configure_input@
#
# The configure script generates 2 files:
#	1. This Makefile
#	2. common/config.h
# If you change this Makefile, you may also need to
# change these files.  To see what is configured by the
# configure script, search for @ in the Makefile.in
# file.
#
# If you wish to reconfigure the installation
# directories it is RECOMMENDED that you re-run the
# configure script.
#
# Use ``./configure --help'' for a list of options.
#

#
# directory containing the source
#
srcdir = @srcdir@
VPATH = @srcdir@

#
# the name of the install program to use
#
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@

#
# the name of the compiler to use
#
CC = @CC@

#
# The compiler flags to use
#
CFLAGS = @CFLAGS@

#
# The preprocessor flags to use
#
CPPFLAGS = @CPPFLAGS@

#
# The linker flags to use
#
LDFLAGS = @LDFLAGS@

#
# prefix for installation path
#
prefix = @prefix@
exec_prefix = @exec_prefix@

#
# where to put the executables
#
# On a network, this would only be shared between machines
# of identical cpu-hw-os flavour.  It can be read-only.
#
# The $(DESTDIR) is for packaging.
#
bindir = $(DESTDIR)@bindir@

#
# where to put the manuals
#
# On a network, this would be shared between all machines
# on the network.  It can be read-only.
#
# The $(DESTDIR) is for packaging.
#
mandir = $(DESTDIR)@mandir@

#
# where to put the non-executable package data
#
# On a network, this would be shared between all
# machines on the network.  It can be read-only.
#
# The $(DESTDIR) is for packaging.
#
DATADIR = $(DESTDIR)@datadir@
DATAROOTDIR = $(DESTDIR)@datarootdir@

#
# where to put the supplementary package executables
#
# On a network, this would be shared between all
# machines of identical architecture.  It can be
# read-only.
#
# The $(DESTDIR) is for packaging.
#
LIBDIR = $(DESTDIR)@libdir@

#
# Which yacc to use
#
YACC = @YACC@

#
# extra libraries required for your system
#
LIBS = @LIBS@

#
# shell to use to run tests and commands
#
SH = @SH@

#
# program used to place index within libraries
#
RANLIB = @RANLIB@
AR = ar

#
# object file name extension (typically "o" or "obj")
#
OBJEXT = @OBJEXT@

#
# command file name extension (typically "" or ".exe")
#
EXEEXT = @EXEEXT@

#
# Set GROFF to the name of the roff command on your
# system, usually "groff" or "troff" or "nroff"
#
GROFF = @GROFF@

# -------------------------------------------------------------
# You should not need to change anything below this line.

#
# The default target
#
the-default-target: all

Makefile: Makefile.in ./config.status
	CONFIG_FILES=$@:Makefile.in CONFIG_HEADERS= $(SH) ./config.status

c_incl/cache.$(OBJEXT): c_incl/cache.c c_incl/cache.h \
		c_incl/os_interface.h common/ac/fcntl.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/symtab.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/cache.c
	mv cache.$(OBJEXT) c_incl/cache.$(OBJEXT)

c_incl/flatten.$(OBJEXT): c_incl/flatten.c c_incl/flatten.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/flatten.c
	mv flatten.$(OBJEXT) c_incl/flatten.$(OBJEXT)

c_incl/lang.$(OBJEXT): c_incl/lang.c c_incl/lang.h c_incl/lang_c.h \
		c_incl/lang_m4.h c_incl/lang_optimis.h \
		c_incl/lang_roff.h c_incl/sniff.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/sub.h \
		common/symtab.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/lang.c
	mv lang.$(OBJEXT) c_incl/lang.$(OBJEXT)

c_incl/lang_c.$(OBJEXT): c_incl/lang_c.c c_incl/lang_c.h c_incl/sniff.h \
		common/ac/ctype.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/string.h common/format_print.h common/input.h \
		common/main.h common/mem.h common/str.h \
		common/str_list.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/lang_c.c
	mv lang_c.$(OBJEXT) c_incl/lang_c.$(OBJEXT)

c_incl/lang_m4.$(OBJEXT): c_incl/lang_m4.c c_incl/lang_m4.h \
		c_incl/sniff.h common/ac/ctype.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/input.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/lang_m4.c
	mv lang_m4.$(OBJEXT) c_incl/lang_m4.$(OBJEXT)

c_incl/lang_optimis.$(OBJEXT): c_incl/lang_optimis.c \
		c_incl/lang_optimis.h c_incl/sniff.h common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/input.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/lang_optimis.c
	mv lang_optimis.$(OBJEXT) c_incl/lang_optimis.$(OBJEXT)

c_incl/lang_roff.$(OBJEXT): c_incl/lang_roff.c c_incl/lang_roff.h \
		c_incl/sniff.h common/ac/ctype.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/input.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/lang_roff.c
	mv lang_roff.$(OBJEXT) c_incl/lang_roff.$(OBJEXT)

c_incl/main.$(OBJEXT): c_incl/main.c c_incl/cache.h c_incl/lang.h \
		c_incl/sniff.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/verbose.h \
		common/version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/main.c
	mv main.$(OBJEXT) c_incl/main.$(OBJEXT)

c_incl/os.$(OBJEXT): c_incl/os.c c_incl/os_interface.h common/ac/errno.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/os.c
	mv os.$(OBJEXT) c_incl/os.$(OBJEXT)

c_incl/sniff.$(OBJEXT): c_incl/sniff.c c_incl/cache.h c_incl/flatten.h \
		c_incl/os_interface.h c_incl/sniff.h c_incl/stripdot.h \
		common/ac/ctype.h common/ac/errno.h common/ac/signal.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/input.h \
		common/input/file_text.h common/input/stdin.h \
		common/main.h common/mem.h common/noreturn.h \
		common/os_path_cat.h common/str.h common/str_list.h \
		common/sub.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/sniff.c
	mv sniff.$(OBJEXT) c_incl/sniff.$(OBJEXT)

c_incl/stripdot.$(OBJEXT): c_incl/stripdot.c c_incl/sniff.h \
		c_incl/stripdot.h common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c c_incl/stripdot.c
	mv stripdot.$(OBJEXT) c_incl/stripdot.$(OBJEXT)

common/ac/libintl.$(OBJEXT): common/ac/libintl.c common/ac/libintl.h \
		common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/libintl.c
	mv libintl.$(OBJEXT) common/ac/libintl.$(OBJEXT)

common/ac/mntent.$(OBJEXT): common/ac/mntent.c common/ac/mntent.h \
		common/ac/stdio.h common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/mntent.c
	mv mntent.$(OBJEXT) common/ac/mntent.$(OBJEXT)

common/ac/stdio.$(OBJEXT): common/ac/stdio.c common/ac/stdarg.h \
		common/ac/stdio.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/stdio.c
	mv stdio.$(OBJEXT) common/ac/stdio.$(OBJEXT)

common/ac/stdlib.$(OBJEXT): common/ac/stdlib.c common/ac/errno.h \
		common/ac/stdlib.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/stdlib.c
	mv stdlib.$(OBJEXT) common/ac/stdlib.$(OBJEXT)

common/ac/string.$(OBJEXT): common/ac/string.c common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/string.c
	mv string.$(OBJEXT) common/ac/string.$(OBJEXT)

common/ac/sys/utsname.$(OBJEXT): common/ac/sys/utsname.c \
		common/ac/string.h common/ac/sys/utsname.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/sys/utsname.c
	mv utsname.$(OBJEXT) common/ac/sys/utsname.$(OBJEXT)

common/ac/time.$(OBJEXT): common/ac/time.c common/ac/time.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/time.c
	mv time.$(OBJEXT) common/ac/time.$(OBJEXT)

common/ac/wchar.$(OBJEXT): common/ac/wchar.c common/ac/stddef.h \
		common/ac/time.h common/ac/wchar.h common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/wchar.c
	mv wchar.$(OBJEXT) common/ac/wchar.$(OBJEXT)

common/ac/wctype.$(OBJEXT): common/ac/wctype.c common/ac/ctype.h \
		common/ac/limits.h common/ac/stddef.h common/ac/time.h \
		common/ac/wchar.h common/ac/wctype.h common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ac/wctype.c
	mv wctype.$(OBJEXT) common/ac/wctype.$(OBJEXT)

common/arglex.$(OBJEXT): common/arglex.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/arglex.h \
		common/error_intl.h common/format_print.h \
		common/language.h common/main.h common/mem.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/arglex.c
	mv arglex.$(OBJEXT) common/arglex.$(OBJEXT)

common/config.h: common/config.h.in ./config.status
	CONFIG_FILES= CONFIG_HEADERS=$@:common/config.h.in $(SH) \
		./config.status

common/env.$(OBJEXT): common/env.c common/ac/stddef.h common/ac/stdlib.h \
		common/ac/string.h common/env.h common/main.h \
		common/mem.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/env.c
	mv env.$(OBJEXT) common/env.$(OBJEXT)

common/error.$(OBJEXT): common/error.c common/ac/ctype.h \
		common/ac/errno.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/error.h common/fflush_slow.h \
		common/format_print.h common/main.h common/mprintf.h \
		common/noreturn.h common/page.h common/progname.h \
		common/quit.h common/star.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error.c
	mv error.$(OBJEXT) common/error.$(OBJEXT)

common/error_intl.$(OBJEXT): common/error_intl.c common/ac/ctype.h \
		common/ac/limits.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/ac/time.h \
		common/ac/wchar.h common/ac/wctype.h common/error.h \
		common/error_intl.h common/fflush_slow.h \
		common/format_print.h common/language.h common/main.h \
		common/noreturn.h common/page.h common/progname.h \
		common/quit.h common/star.h common/sub.h common/trace.h \
		common/verbose.h common/wstr.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl.c
	mv error_intl.$(OBJEXT) common/error_intl.$(OBJEXT)

common/error_intl/close.$(OBJEXT): common/error_intl/close.c \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/close.c
	mv close.$(OBJEXT) common/error_intl/close.$(OBJEXT)

common/error_intl/open.$(OBJEXT): common/error_intl/open.c \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/open.c
	mv open.$(OBJEXT) common/error_intl/open.$(OBJEXT)

common/error_intl/read.$(OBJEXT): common/error_intl/read.c \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/read.c
	mv read.$(OBJEXT) common/error_intl/read.$(OBJEXT)

common/error_intl/stat.$(OBJEXT): common/error_intl/stat.c \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/stat.c
	mv stat.$(OBJEXT) common/error_intl/stat.$(OBJEXT)

common/error_intl/unlink.$(OBJEXT): common/error_intl/unlink.c \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/unlink.c
	mv unlink.$(OBJEXT) common/error_intl/unlink.$(OBJEXT)

common/error_intl/write.$(OBJEXT): common/error_intl/write.c \
		common/ac/stdio.h common/error_intl.h \
		common/fflush_slow.h common/format_print.h common/main.h \
		common/noreturn.h common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/error_intl/write.c
	mv write.$(OBJEXT) common/error_intl/write.$(OBJEXT)

common/exeext.$(OBJEXT): common/exeext.c common/ac/ctype.h \
		common/ac/string.h common/exeext.h common/libdir.h \
		common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/exeext.c
	mv exeext.$(OBJEXT) common/exeext.$(OBJEXT)

common/fflush_slow.$(OBJEXT): common/fflush_slow.c common/ac/errno.h \
		common/ac/stdio.h common/ac/unistd.h \
		common/fflush_slow.h common/main.h common/progname.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fflush_slow.c
	mv fflush_slow.$(OBJEXT) common/fflush_slow.$(OBJEXT)

common/fp.$(OBJEXT): common/fp.c common/ac/dirent.h common/ac/errno.h \
		common/ac/fcntl.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/unistd.h common/format_print.h common/fp.h \
		common/main.h common/mem.h common/str.h \
		common/str_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp.c
	mv fp.$(OBJEXT) common/fp.$(OBJEXT)

common/fp/cksum.$(OBJEXT): common/fp/cksum.c common/ac/stddef.h \
		common/ac/string.h common/fp.h common/fp/cksum.h \
		common/fp/crc32.h common/fp/len.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/cksum.c
	mv cksum.$(OBJEXT) common/fp/cksum.$(OBJEXT)

common/fp/combined.$(OBJEXT): common/fp/combined.c common/ac/stddef.h \
		common/format_print.h common/fp.h common/fp/combined.h \
		common/fp/crc32.h common/fp/len.h common/fp/md5.h \
		common/fp/snefru.h common/main.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/combined.c
	mv combined.$(OBJEXT) common/fp/combined.$(OBJEXT)

common/fp/crc32.$(OBJEXT): common/fp/crc32.c common/ac/stddef.h \
		common/ac/stdio.h common/fp.h common/fp/crc32.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/crc32.c
	mv crc32.$(OBJEXT) common/fp/crc32.$(OBJEXT)

common/fp/ident.$(OBJEXT): common/fp/ident.c common/ac/stddef.h \
		common/ac/stdio.h common/ac/string.h \
		common/format_print.h common/fp.h common/fp/combined.h \
		common/fp/crc32.h common/fp/ident.h common/main.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/ident.c
	mv ident.$(OBJEXT) common/fp/ident.$(OBJEXT)

common/fp/len.$(OBJEXT): common/fp/len.c common/ac/stddef.h \
		common/ac/stdio.h common/fp.h common/fp/len.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/len.c
	mv len.$(OBJEXT) common/fp/len.$(OBJEXT)

common/fp/md5.$(OBJEXT): common/fp/md5.c common/ac/limits.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/format_print.h common/fp.h common/fp/md5.h \
		common/main.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/md5.c
	mv md5.$(OBJEXT) common/fp/md5.$(OBJEXT)

common/fp/snefru.$(OBJEXT): common/fp/snefru.c common/ac/limits.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/fp.h common/fp/snefru.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fp/snefru.c
	mv snefru.$(OBJEXT) common/fp/snefru.$(OBJEXT)

common/fstrcmp.$(OBJEXT): common/fstrcmp.c common/ac/stddef.h \
		common/ac/string.h common/format_print.h \
		common/fstrcmp.h common/main.h common/mem.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/fstrcmp.c
	mv fstrcmp.$(OBJEXT) common/fstrcmp.$(OBJEXT)

common/gmatch.$(OBJEXT): common/gmatch.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/gmatch.h common/main.h \
		common/str.h common/sub.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/gmatch.c
	mv gmatch.$(OBJEXT) common/gmatch.$(OBJEXT)

common/help.$(OBJEXT): common/help.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/unistd.h common/arglex.h common/env.h \
		common/error.h common/error_intl.h common/format_print.h \
		common/help.h common/libdir.h common/main.h \
		common/noreturn.h common/os_path_cat.h common/page.h \
		common/progname.h common/quit.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		common/verbose.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/help.c
	mv help.$(OBJEXT) common/help.$(OBJEXT)

common/home_directo.$(OBJEXT): common/home_directo.c common/ac/stddef.h \
		common/ac/stdlib.h common/ac/unistd.h common/env.h \
		common/home_directo.h common/main.h common/mem.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/home_directo.c
	mv home_directo.$(OBJEXT) common/home_directo.$(OBJEXT)

common/input.$(OBJEXT): common/input.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/input.h \
		common/input/private.h common/main.h common/mem.h \
		common/str.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input.c
	mv input.$(OBJEXT) common/input.$(OBJEXT)

common/input/crlf.$(OBJEXT): common/input/crlf.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/input.h \
		common/input/crlf.h common/input/private.h common/main.h \
		common/str.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/crlf.c
	mv crlf.$(OBJEXT) common/input/crlf.$(OBJEXT)

common/input/file.$(OBJEXT): common/input/file.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/input.h common/input/file.h \
		common/input/private.h common/input/stdin.h \
		common/main.h common/noreturn.h common/str.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/file.c
	mv file.$(OBJEXT) common/input/file.$(OBJEXT)

common/input/file_text.$(OBJEXT): common/input/file_text.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/input.h common/input/crlf.h \
		common/input/file.h common/input/file_text.h \
		common/main.h common/str.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/file_text.c
	mv file_text.$(OBJEXT) common/input/file_text.$(OBJEXT)

common/input/null.$(OBJEXT): common/input/null.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/input.h \
		common/input/null.h common/input/private.h common/main.h \
		common/str.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/null.c
	mv null.$(OBJEXT) common/input/null.$(OBJEXT)

common/input/private.$(OBJEXT): common/input/private.c \
		common/ac/stddef.h common/input.h common/input/private.h \
		common/main.h common/mem.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/private.c
	mv private.$(OBJEXT) common/input/private.$(OBJEXT)

common/input/pushba_trans.$(OBJEXT): common/input/pushba_trans.c \
		common/input.h common/input/private.h common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/pushba_trans.c
	mv pushba_trans.$(OBJEXT) common/input/pushba_trans.$(OBJEXT)

common/input/stdin.$(OBJEXT): common/input/stdin.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/input.h \
		common/input/private.h common/input/stdin.h \
		common/main.h common/noreturn.h common/str.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/input/stdin.c
	mv stdin.$(OBJEXT) common/input/stdin.$(OBJEXT)

common/itab.$(OBJEXT): common/itab.c common/ac/stddef.h \
		common/format_print.h common/itab.h common/main.h \
		common/mem.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/itab.c
	mv itab.$(OBJEXT) common/itab.$(OBJEXT)

common/language.$(OBJEXT): common/language.c common/ac/libintl.h \
		common/ac/locale.h common/ac/stdlib.h common/env.h \
		common/error.h common/format_print.h common/language.h \
		common/libdir.h common/main.h common/noreturn.h \
		common/progname.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/language.c
	mv language.$(OBJEXT) common/language.$(OBJEXT)

common/libdir.$(OBJEXT): common/libdir.c common/libdir.h common/main.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/libdir.c
	mv libdir.$(OBJEXT) common/libdir.$(OBJEXT)

common/mem.$(OBJEXT): common/mem.c common/ac/errno.h common/ac/stddef.h \
		common/ac/stdlib.h common/ac/string.h common/error.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/mem.c
	mv mem.$(OBJEXT) common/mem.$(OBJEXT)

common/mprintf.$(OBJEXT): common/mprintf.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdint.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/error.h common/format_print.h common/main.h \
		common/mprintf.h common/noreturn.h common/str.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/mprintf.c
	mv mprintf.$(OBJEXT) common/mprintf.$(OBJEXT)

common/os_path_cat.$(OBJEXT): common/os_path_cat.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/os_path_cat.h common/str.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/os_path_cat.c
	mv os_path_cat.$(OBJEXT) common/os_path_cat.$(OBJEXT)

common/page.$(OBJEXT): common/page.c common/ac/stdio.h \
		common/ac/stdlib.h common/ac/sys/ioctl.h \
		common/ac/termios.h common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/page.h common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/page.c
	mv page.$(OBJEXT) common/page.$(OBJEXT)

common/progname.$(OBJEXT): common/progname.c common/ac/string.h \
		common/exeext.h common/main.h common/progname.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/progname.c
	mv progname.$(OBJEXT) common/progname.$(OBJEXT)

common/quit.$(OBJEXT): common/quit.c common/ac/stdlib.h common/main.h \
		common/noreturn.h common/quit.h common/star.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/quit.c
	mv quit.$(OBJEXT) common/quit.$(OBJEXT)

common/star.$(OBJEXT): common/star.c common/ac/stddef.h \
		common/ac/stdio.h common/ac/string.h common/ac/time.h \
		common/fflush_slow.h common/format_print.h common/main.h \
		common/noreturn.h common/page.h common/progname.h \
		common/quit.h common/star.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/star.c
	mv star.$(OBJEXT) common/star.$(OBJEXT)

common/str.$(OBJEXT): common/str.c common/ac/ctype.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/error.h common/format_print.h \
		common/main.h common/mem.h common/mprintf.h \
		common/noreturn.h common/str.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str.c
	mv str.$(OBJEXT) common/str.$(OBJEXT)

common/str/cat2.$(OBJEXT): common/str/cat2.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/cat2.c
	mv cat2.$(OBJEXT) common/str/cat2.$(OBJEXT)

common/str/cat3.$(OBJEXT): common/str/cat3.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/cat3.c
	mv cat3.$(OBJEXT) common/str/cat3.$(OBJEXT)

common/str/downcase.$(OBJEXT): common/str/downcase.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/downcase.c
	mv downcase.$(OBJEXT) common/str/downcase.$(OBJEXT)

common/str/quote.$(OBJEXT): common/str/quote.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/stracc.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/quote.c
	mv quote.$(OBJEXT) common/str/quote.$(OBJEXT)

common/str/re.$(OBJEXT): common/str/re.c common/ac/regex.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str/re.h common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/re.c
	mv re.$(OBJEXT) common/str/re.$(OBJEXT)

common/str/substitute.$(OBJEXT): common/str/substitute.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/substitute.c
	mv substitute.$(OBJEXT) common/str/substitute.$(OBJEXT)

common/str/upcase.$(OBJEXT): common/str/upcase.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/stracc.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str/upcase.c
	mv upcase.$(OBJEXT) common/str/upcase.$(OBJEXT)

common/str_list.$(OBJEXT): common/str_list.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/str_list.c
	mv str_list.$(OBJEXT) common/str_list.$(OBJEXT)

common/stracc.$(OBJEXT): common/stracc.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/stracc.h common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/stracc.c
	mv stracc.$(OBJEXT) common/stracc.$(OBJEXT)

common/sub.$(OBJEXT): common/sub.c common/ac/ctype.h common/ac/errno.h \
		common/ac/libintl.h common/ac/limits.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/ac/time.h \
		common/ac/wchar.h common/ac/wctype.h common/arglex.h \
		common/error.h common/error_intl.h common/format_print.h \
		common/language.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/sub.h \
		common/sub/basename.h common/sub/date.h \
		common/sub/dirname.h common/sub/downcase.h \
		common/sub/errno.h common/sub/expr.h common/sub/ident.h \
		common/sub/left.h common/sub/length.h \
		common/sub/plural.h common/sub/private.h \
		common/sub/progname.h common/sub/right.h \
		common/sub/upcase.h common/sub/zero_pad.h common/trace.h \
		common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub.c
	mv sub.$(OBJEXT) common/sub.$(OBJEXT)

common/sub/basename.$(OBJEXT): common/sub/basename.c common/ac/stddef.h \
		common/ac/stdlib.h common/ac/string.h \
		common/format_print.h common/main.h common/sub.h \
		common/sub/basename.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/basename.c
	mv basename.$(OBJEXT) common/sub/basename.$(OBJEXT)

common/sub/date.$(OBJEXT): common/sub/date.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h common/ac/time.h \
		common/format_print.h common/language.h common/main.h \
		common/str.h common/sub.h common/sub/date.h \
		common/sub/private.h common/trace.h common/wstr.h \
		common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/date.c
	mv date.$(OBJEXT) common/sub/date.$(OBJEXT)

common/sub/dirname.$(OBJEXT): common/sub/dirname.c common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/sub.h common/sub/dirname.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/dirname.c
	mv dirname.$(OBJEXT) common/sub/dirname.$(OBJEXT)

common/sub/downcase.$(OBJEXT): common/sub/downcase.c common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/sub.h common/sub/downcase.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/downcase.c
	mv downcase.$(OBJEXT) common/sub/downcase.$(OBJEXT)

common/sub/errno.$(OBJEXT): common/sub/errno.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/ac/unistd.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/errno.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/errno.c
	mv errno.$(OBJEXT) common/sub/errno.$(OBJEXT)

common/sub/expr.$(OBJEXT): common/sub/expr.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/expr.h common/sub/expr_gram.h \
		common/sub/private.h common/trace.h common/wstr.h \
		common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/expr.c
	mv expr.$(OBJEXT) common/sub/expr.$(OBJEXT)

common/sub/expr_gram.yacc.c common/sub/expr_gram.yacc.h: \
		common/sub/expr_gram.y
	$(YACC) -d common/sub/expr_gram.y
	sed -e 's/yy\|YY_YY/sub_expr_gram_/g' y.tab.c > \
		common/sub/expr_gram.yacc.c
	sed -e 's/yy\|YY_YY/sub_expr_gram_/g' y.tab.h > \
		common/sub/expr_gram.yacc.h
	rm y.tab.c y.tab.h

common/sub/expr_gram.yacc.$(OBJEXT): common/sub/expr_gram.yacc.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/str.h common/sub.h common/sub/expr_gram.h \
		common/sub/expr_lex.h common/sub/private.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/expr_gram.yacc.c
	mv expr_gram.yacc.$(OBJEXT) common/sub/expr_gram.yacc.$(OBJEXT)

common/sub/expr_lex.$(OBJEXT): common/sub/expr_lex.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/sub/expr_gram.yacc.h \
		common/sub/expr_lex.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/expr_lex.c
	mv expr_lex.$(OBJEXT) common/sub/expr_lex.$(OBJEXT)

common/sub/ident.$(OBJEXT): common/sub/ident.c common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/sub.h common/sub/ident.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/ident.c
	mv ident.$(OBJEXT) common/sub/ident.$(OBJEXT)

common/sub/left.$(OBJEXT): common/sub/left.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/left.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/left.c
	mv left.$(OBJEXT) common/sub/left.$(OBJEXT)

common/sub/length.$(OBJEXT): common/sub/length.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/length.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/length.c
	mv length.$(OBJEXT) common/sub/length.$(OBJEXT)

common/sub/plural.$(OBJEXT): common/sub/plural.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/plural.h common/sub/private.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/plural.c
	mv plural.$(OBJEXT) common/sub/plural.$(OBJEXT)

common/sub/progname.$(OBJEXT): common/sub/progname.c common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/progname.h common/sub.h common/sub/private.h \
		common/sub/progname.h common/trace.h common/wstr.h \
		common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/progname.c
	mv progname.$(OBJEXT) common/sub/progname.$(OBJEXT)

common/sub/right.$(OBJEXT): common/sub/right.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/sub.h common/sub/private.h common/sub/right.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/right.c
	mv right.$(OBJEXT) common/sub/right.$(OBJEXT)

common/sub/upcase.$(OBJEXT): common/sub/upcase.c common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/sub.h common/sub/private.h common/sub/upcase.h \
		common/trace.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/upcase.c
	mv upcase.$(OBJEXT) common/sub/upcase.$(OBJEXT)

common/sub/zero_pad.$(OBJEXT): common/sub/zero_pad.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/sub.h common/sub/private.h \
		common/sub/zero_pad.h common/trace.h common/wstr.h \
		common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/sub/zero_pad.c
	mv zero_pad.$(OBJEXT) common/sub/zero_pad.$(OBJEXT)

common/symtab.$(OBJEXT): common/symtab.c common/ac/stdarg.h \
		common/ac/stddef.h common/error.h common/format_print.h \
		common/fstrcmp.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/symtab.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/symtab.c
	mv symtab.$(OBJEXT) common/symtab.$(OBJEXT)

common/timing.$(OBJEXT): common/timing.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/ac/unistd.h common/error.h common/format_print.h \
		common/main.h common/mem.h common/noreturn.h \
		common/star.h common/str.h common/symtab.h \
		common/timing.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/timing.c
	mv timing.$(OBJEXT) common/timing.$(OBJEXT)

common/trace.$(OBJEXT): common/trace.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error.h common/fflush_slow.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/progname.h common/str.h \
		common/trace.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/trace.c
	mv trace.$(OBJEXT) common/trace.$(OBJEXT)

common/ts.$(OBJEXT): common/ts.c common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdlib.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h common/ts.h cook/id.h \
		cook/id/variable.h cook/opcode/context.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/ts.c
	mv ts.$(OBJEXT) common/ts.$(OBJEXT)

common/verbose.$(OBJEXT): common/verbose.c common/arglex.h common/help.h \
		common/main.h common/verbose.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/verbose.c
	mv verbose.$(OBJEXT) common/verbose.$(OBJEXT)

common/version-stmp.$(OBJEXT): common/version-stmp.c common/main.h \
		common/patchlevel.h common/version-stmp.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/version-stmp.c
	mv version-stmp.$(OBJEXT) common/version-stmp.$(OBJEXT)

common/version.$(OBJEXT): common/version.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/arglex.h \
		common/error.h common/format_print.h common/help.h \
		common/main.h common/noreturn.h common/progname.h \
		common/quit.h common/str.h common/trace.h \
		common/version-stmp.h common/version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/version.c
	mv version.$(OBJEXT) common/version.$(OBJEXT)

common/wstr.$(OBJEXT): common/wstr.c common/ac/ctype.h \
		common/ac/limits.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/ac/time.h common/ac/wchar.h common/ac/wctype.h \
		common/error.h common/format_print.h common/language.h \
		common/main.h common/mem.h common/noreturn.h \
		common/str.h common/trace.h common/wstr.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/wstr.c
	mv wstr.$(OBJEXT) common/wstr.$(OBJEXT)

common/wstr_list.$(OBJEXT): common/wstr_list.c common/ac/stddef.h \
		common/ac/stdlib.h common/ac/string.h common/main.h \
		common/mem.h common/wstr.h common/wstr_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c common/wstr_list.c
	mv wstr_list.$(OBJEXT) common/wstr_list.$(OBJEXT)

cook/archive.$(OBJEXT): cook/archive.c common/ac/ar.h common/ac/ctype.h \
		common/ac/errno.h common/ac/fcntl.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h common/ac/unistd.h \
		common/ac/utime.h common/format_print.h common/fp.h \
		common/main.h common/mem.h common/str.h common/trace.h \
		cook/archive.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/archive.c
	mv archive.$(OBJEXT) cook/archive.$(OBJEXT)

cook/builtin.$(OBJEXT): cook/builtin.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/symtab.h cook/builtin.h \
		cook/builtin/addprefix.h cook/builtin/addsuffix.h \
		cook/builtin/basename.h cook/builtin/boolean.h \
		cook/builtin/cando.h cook/builtin/collect.h \
		cook/builtin/cook.h cook/builtin/defined.h \
		cook/builtin/dos.h cook/builtin/execute.h \
		cook/builtin/exists.h cook/builtin/expr.h \
		cook/builtin/filter_out.h cook/builtin/find_command.h \
		cook/builtin/findstring.h cook/builtin/getenv.h \
		cook/builtin/glob.h cook/builtin/home.h \
		cook/builtin/interi_files.h cook/builtin/join.h \
		cook/builtin/match.h cook/builtin/mtime.h \
		cook/builtin/opsys.h cook/builtin/options.h \
		cook/builtin/pathname.h cook/builtin/positional.h \
		cook/builtin/print.h cook/builtin/private.h \
		cook/builtin/read.h cook/builtin/readlink.h \
		cook/builtin/relati_dirna.h cook/builtin/resolve.h \
		cook/builtin/sort_newest.h cook/builtin/split.h \
		cook/builtin/stringset.h cook/builtin/strip.h \
		cook/builtin/stripdot.h cook/builtin/strlen.h \
		cook/builtin/subst.h cook/builtin/substr.h \
		cook/builtin/suffix.h cook/builtin/text.h \
		cook/builtin/thread-id.h cook/builtin/unsplit.h \
		cook/builtin/uptodate.h cook/builtin/word.h \
		cook/builtin/wordlist.h cook/builtin/write.h \
		cook/id/builtin.h cook/id/global.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin.c
	mv builtin.$(OBJEXT) cook/builtin.$(OBJEXT)

cook/builtin/addprefix.$(OBJEXT): cook/builtin/addprefix.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h cook/builtin/addprefix.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/addprefix.c
	mv addprefix.$(OBJEXT) cook/builtin/addprefix.$(OBJEXT)

cook/builtin/addsuffix.$(OBJEXT): cook/builtin/addsuffix.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h cook/builtin/addsuffix.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/addsuffix.c
	mv addsuffix.$(OBJEXT) cook/builtin/addsuffix.$(OBJEXT)

cook/builtin/basename.$(OBJEXT): cook/builtin/basename.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/builtin/basename.h \
		cook/builtin/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/basename.c
	mv basename.$(OBJEXT) cook/builtin/basename.$(OBJEXT)

cook/builtin/boolean.$(OBJEXT): cook/builtin/boolean.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/boolean.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/boolean.c
	mv boolean.$(OBJEXT) cook/builtin/boolean.$(OBJEXT)

cook/builtin/cando.$(OBJEXT): cook/builtin/cando.c common/ac/stdarg.h \
		common/ac/stddef.h common/error.h common/format_print.h \
		common/main.h common/noreturn.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/cando.h \
		cook/builtin/private.h cook/desist.h cook/graph.h \
		cook/graph/build.h cook/graph/stats.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/cando.c
	mv cando.$(OBJEXT) cook/builtin/cando.$(OBJEXT)

cook/builtin/collect.$(OBJEXT): cook/builtin/collect.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h common/error.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/star.h common/str.h \
		common/str_list.h common/stracc.h common/sub.h \
		common/trace.h cook/builtin/collect.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/option.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/collect.c
	mv collect.$(OBJEXT) cook/builtin/collect.$(OBJEXT)

cook/builtin/cook.$(OBJEXT): cook/builtin/cook.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/builtin/cook.h cook/builtin/private.h cook/desist.h \
		cook/graph.h cook/graph/build.h cook/graph/stats.h \
		cook/graph/walk.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/cook.c
	mv cook.$(OBJEXT) cook/builtin/cook.$(OBJEXT)

cook/builtin/defined.$(OBJEXT): cook/builtin/defined.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/defined.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/defined.c
	mv defined.$(OBJEXT) cook/builtin/defined.$(OBJEXT)

cook/builtin/dos.$(OBJEXT): cook/builtin/dos.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/stracc.h common/trace.h \
		cook/builtin/dos.h cook/builtin/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/dos.c
	mv dos.$(OBJEXT) cook/builtin/dos.$(OBJEXT)

cook/builtin/execute.$(OBJEXT): cook/builtin/execute.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/error.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/star.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/execute.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/option.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/execute.c
	mv execute.$(OBJEXT) cook/builtin/execute.$(OBJEXT)

cook/builtin/exists.$(OBJEXT): cook/builtin/exists.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/exists.h \
		cook/builtin/private.h cook/expr.h cook/expr/position.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/exists.c
	mv exists.$(OBJEXT) cook/builtin/exists.$(OBJEXT)

cook/builtin/expr.$(OBJEXT): cook/builtin/expr.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/builtin/expr.h cook/builtin/expr_parse.h \
		cook/builtin/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/expr.c
	mv expr.$(OBJEXT) cook/builtin/expr.$(OBJEXT)

cook/builtin/expr_lex.$(OBJEXT): cook/builtin/expr_lex.c \
		common/ac/errno.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h cook/builtin/expr_lex.h \
		cook/builtin/expr_parse.yacc.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/expr_lex.c
	mv expr_lex.$(OBJEXT) cook/builtin/expr_lex.$(OBJEXT)

cook/builtin/expr_parse.yacc.c cook/builtin/expr_parse.yacc.h: \
		cook/builtin/expr_parse.y
	$(YACC) -d cook/builtin/expr_parse.y
	sed -e 's/yy\|YY_YY/builtin_expr_parse_/g' y.tab.c > \
		cook/builtin/expr_parse.yacc.c
	sed -e 's/yy\|YY_YY/builtin_expr_parse_/g' y.tab.h > \
		cook/builtin/expr_parse.yacc.h
	rm y.tab.c y.tab.h

cook/builtin/expr_parse.yacc.$(OBJEXT): cook/builtin/expr_parse.yacc.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/sub.h cook/builtin/expr_lex.h \
		cook/builtin/expr_parse.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/expr_parse.yacc.c
	mv expr_parse.yacc.$(OBJEXT) cook/builtin/expr_parse.yacc.$(OBJEXT)

cook/builtin/filter_out.$(OBJEXT): cook/builtin/filter_out.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/filter_out.h \
		cook/builtin/private.h cook/expr/position.h cook/match.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/filter_out.c
	mv filter_out.$(OBJEXT) cook/builtin/filter_out.$(OBJEXT)

cook/builtin/find_command.$(OBJEXT): cook/builtin/find_command.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/ac/time.h \
		common/error_intl.h common/exeext.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/os_path_cat.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/find_command.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/find_command.c
	mv find_command.$(OBJEXT) cook/builtin/find_command.$(OBJEXT)

cook/builtin/findstring.$(OBJEXT): cook/builtin/findstring.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/findstring.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/findstring.c
	mv findstring.$(OBJEXT) cook/builtin/findstring.$(OBJEXT)

cook/builtin/getenv.$(OBJEXT): cook/builtin/getenv.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/getenv.h \
		cook/builtin/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/getenv.c
	mv getenv.$(OBJEXT) cook/builtin/getenv.$(OBJEXT)

cook/builtin/glob.$(OBJEXT): cook/builtin/glob.c common/ac/dirent.h \
		common/ac/errno.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/error_intl.h common/format_print.h \
		common/gmatch.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/stracc.h common/sub.h common/trace.h \
		cook/builtin/glob.h cook/builtin/private.h \
		cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/glob.c
	mv glob.$(OBJEXT) cook/builtin/glob.$(OBJEXT)

cook/builtin/home.$(OBJEXT): cook/builtin/home.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/error_intl.h common/format_print.h \
		common/home_directo.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/home.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/home.c
	mv home.$(OBJEXT) cook/builtin/home.$(OBJEXT)

cook/builtin/interi_files.$(OBJEXT): cook/builtin/interi_files.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/interi_files.h \
		cook/builtin/private.h cook/expr/position.h cook/graph.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/interi_files.c
	mv interi_files.$(OBJEXT) cook/builtin/interi_files.$(OBJEXT)

cook/builtin/join.$(OBJEXT): cook/builtin/join.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/join.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/join.c
	mv join.$(OBJEXT) cook/builtin/join.$(OBJEXT)

cook/builtin/match.$(OBJEXT): cook/builtin/match.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/match.h \
		cook/builtin/private.h cook/expr/position.h cook/match.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/match.c
	mv match.$(OBJEXT) cook/builtin/match.$(OBJEXT)

cook/builtin/mtime.$(OBJEXT): cook/builtin/mtime.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/mtime.h \
		cook/builtin/private.h cook/cook.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/mtime.c
	mv mtime.$(OBJEXT) cook/builtin/mtime.$(OBJEXT)

cook/builtin/opsys.$(OBJEXT): cook/builtin/opsys.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/ac/sys/utsname.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h cook/builtin/opsys.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/opsys.c
	mv opsys.$(OBJEXT) cook/builtin/opsys.$(OBJEXT)

cook/builtin/options.$(OBJEXT): cook/builtin/options.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/options.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/options.c
	mv options.$(OBJEXT) cook/builtin/options.$(OBJEXT)

cook/builtin/pathname.$(OBJEXT): cook/builtin/pathname.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/pathname.h \
		cook/builtin/private.h cook/expr/position.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/pathname.c
	mv pathname.$(OBJEXT) cook/builtin/pathname.$(OBJEXT)

cook/builtin/positional.$(OBJEXT): cook/builtin/positional.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/positional.h \
		cook/builtin/private.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/positional.c
	mv positional.$(OBJEXT) cook/builtin/positional.$(OBJEXT)

cook/builtin/print.$(OBJEXT): cook/builtin/print.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/unistd.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/print.h \
		cook/builtin/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/print.c
	mv print.$(OBJEXT) cook/builtin/print.$(OBJEXT)

cook/builtin/private.$(OBJEXT): cook/builtin/private.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/private.h \
		cook/expr/position.h cook/opcode/context.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/private.c
	mv private.$(OBJEXT) cook/builtin/private.$(OBJEXT)

cook/builtin/read.$(OBJEXT): cook/builtin/read.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/stracc.h common/sub.h common/trace.h \
		cook/builtin/private.h cook/builtin/read.h \
		cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/read.c
	mv read.$(OBJEXT) cook/builtin/read.$(OBJEXT)

cook/builtin/readlink.$(OBJEXT): cook/builtin/readlink.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/unistd.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/readlink.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/readlink.c
	mv readlink.$(OBJEXT) cook/builtin/readlink.$(OBJEXT)

cook/builtin/relati_dirna.$(OBJEXT): cook/builtin/relati_dirna.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/relati_dirna.h cook/expr/position.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/relati_dirna.c
	mv relati_dirna.$(OBJEXT) cook/builtin/relati_dirna.$(OBJEXT)

cook/builtin/resolve.$(OBJEXT): cook/builtin/resolve.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/time.h \
		common/error.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/resolve.h cook/cook.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/resolve.c
	mv resolve.$(OBJEXT) cook/builtin/resolve.$(OBJEXT)

cook/builtin/sort_newest.$(OBJEXT): cook/builtin/sort_newest.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdlib.h \
		common/ac/time.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/builtin/private.h cook/builtin/sort_newest.h \
		cook/cook.h cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/sort_newest.c
	mv sort_newest.$(OBJEXT) cook/builtin/sort_newest.$(OBJEXT)

cook/builtin/split.$(OBJEXT): cook/builtin/split.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/split.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/split.c
	mv split.$(OBJEXT) cook/builtin/split.$(OBJEXT)

cook/builtin/stringset.$(OBJEXT): cook/builtin/stringset.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/builtin/private.h \
		cook/builtin/stringset.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/stringset.c
	mv stringset.$(OBJEXT) cook/builtin/stringset.$(OBJEXT)

cook/builtin/strip.$(OBJEXT): cook/builtin/strip.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/stracc.h cook/builtin/private.h \
		cook/builtin/strip.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/strip.c
	mv strip.$(OBJEXT) cook/builtin/strip.$(OBJEXT)

cook/builtin/stripdot.$(OBJEXT): cook/builtin/stripdot.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/builtin/private.h \
		cook/builtin/stripdot.h cook/strip_dot.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/stripdot.c
	mv stripdot.$(OBJEXT) cook/builtin/stripdot.$(OBJEXT)

cook/builtin/strlen.$(OBJEXT): cook/builtin/strlen.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/private.h \
		cook/builtin/strlen.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/strlen.c
	mv strlen.$(OBJEXT) cook/builtin/strlen.$(OBJEXT)

cook/builtin/subst.$(OBJEXT): cook/builtin/subst.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/subst.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/subst.c
	mv subst.$(OBJEXT) cook/builtin/subst.$(OBJEXT)

cook/builtin/substr.$(OBJEXT): cook/builtin/substr.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/private.h \
		cook/builtin/substr.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/substr.c
	mv substr.$(OBJEXT) cook/builtin/substr.$(OBJEXT)

cook/builtin/suffix.$(OBJEXT): cook/builtin/suffix.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/builtin/private.h \
		cook/builtin/suffix.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/suffix.c
	mv suffix.$(OBJEXT) cook/builtin/suffix.$(OBJEXT)

cook/builtin/text.$(OBJEXT): cook/builtin/text.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/stracc.h \
		common/sub.h common/trace.h cook/builtin/private.h \
		cook/builtin/text.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/text.c
	mv text.$(OBJEXT) cook/builtin/text.$(OBJEXT)

cook/builtin/thread-id.$(OBJEXT): cook/builtin/thread-id.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/private.h \
		cook/builtin/thread-id.h cook/expr/position.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/thread-id.c
	mv thread-id.$(OBJEXT) cook/builtin/thread-id.$(OBJEXT)

cook/builtin/unsplit.$(OBJEXT): cook/builtin/unsplit.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/private.h \
		cook/builtin/unsplit.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/unsplit.c
	mv unsplit.$(OBJEXT) cook/builtin/unsplit.$(OBJEXT)

cook/builtin/uptodate.$(OBJEXT): cook/builtin/uptodate.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h common/trace.h \
		cook/builtin/private.h cook/builtin/uptodate.h \
		cook/desist.h cook/graph.h cook/graph/build.h \
		cook/graph/file.h cook/graph/recipe_list.h \
		cook/graph/stats.h cook/graph/walk.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/uptodate.c
	mv uptodate.$(OBJEXT) cook/builtin/uptodate.$(OBJEXT)

cook/builtin/word.$(OBJEXT): cook/builtin/word.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin/private.h \
		cook/builtin/word.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/word.c
	mv word.$(OBJEXT) cook/builtin/word.$(OBJEXT)

cook/builtin/wordlist.$(OBJEXT): cook/builtin/wordlist.c \
		common/ac/ctype.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/wordlist.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/wordlist.c
	mv wordlist.$(OBJEXT) cook/builtin/wordlist.$(OBJEXT)

cook/builtin/write.$(OBJEXT): cook/builtin/write.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/error_intl.h common/fflush_slow.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/builtin/private.h \
		cook/builtin/write.h cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/builtin/write.c
	mv write.$(OBJEXT) cook/builtin/write.$(OBJEXT)

cook/cascade.$(OBJEXT): cook/cascade.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/symtab.h common/trace.h cook/cascade.h \
		cook/expr/position.h cook/strip_dot.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/cascade.c
	mv cascade.$(OBJEXT) cook/cascade.$(OBJEXT)

cook/cook.$(OBJEXT): cook/cook.c common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/time.h common/error.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/os_path_cat.h \
		common/star.h common/str.h common/str_list.h \
		common/sub.h common/symtab.h common/trace.h \
		cook/cascade.h cook/cook.h cook/desist.h cook/expr.h \
		cook/expr/position.h cook/fingerprint.h \
		cook/fingerprint/value.h cook/flag.h cook/graph.h \
		cook/graph/build.h cook/graph/file_pair.h \
		cook/graph/leaf.h cook/graph/stats.h cook/graph/walk.h \
		cook/graph/web.h cook/id.h cook/id/variable.h \
		cook/match.h cook/match/new_by_recip.h \
		cook/opcode/context.h cook/opcode/status.h cook/option.h \
		cook/os_interface.h cook/recipe.h cook/recipe/list.h \
		cook/stat.cache.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/cook.c
	mv cook.$(OBJEXT) cook/cook.$(OBJEXT)

cook/desist.$(OBJEXT): cook/desist.c common/ac/signal.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/star.h common/str.h common/str_list.h \
		common/sub.h cook/desist.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/desist.c
	mv desist.$(OBJEXT) cook/desist.$(OBJEXT)

cook/dir_part.$(OBJEXT): cook/dir_part.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h cook/dir_part.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/dir_part.c
	mv dir_part.$(OBJEXT) cook/dir_part.$(OBJEXT)

cook/expr.$(OBJEXT): cook/expr.c common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin.h cook/cook.h \
		cook/expr.h cook/expr/position.h cook/id.h cook/lex.h \
		cook/match.h cook/opcode.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h cook/option.h \
		cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr.c
	mv expr.$(OBJEXT) cook/expr.$(OBJEXT)

cook/expr/catenate.$(OBJEXT): cook/expr/catenate.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/expr.h cook/expr/catenate.h cook/expr/position.h \
		cook/opcode.h cook/opcode/catenate.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr/catenate.c
	mv catenate.$(OBJEXT) cook/expr/catenate.$(OBJEXT)

cook/expr/constant.$(OBJEXT): cook/expr/constant.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h cook/expr.h \
		cook/expr/constant.h cook/expr/position.h cook/match.h \
		cook/opcode.h cook/opcode/list.h cook/opcode/status.h \
		cook/opcode/string.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr/constant.c
	mv constant.$(OBJEXT) cook/expr/constant.$(OBJEXT)

cook/expr/function.$(OBJEXT): cook/expr/function.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr.h cook/expr/function.h cook/expr/list.h \
		cook/expr/position.h cook/opcode.h \
		cook/opcode/function.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr/function.c
	mv function.$(OBJEXT) cook/expr/function.$(OBJEXT)

cook/expr/list.$(OBJEXT): cook/expr/list.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h cook/expr.h cook/expr/list.h \
		cook/expr/position.h cook/match.h cook/opcode.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr/list.c
	mv list.$(OBJEXT) cook/expr/list.$(OBJEXT)

cook/expr/position.$(OBJEXT): cook/expr/position.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/sub.h common/trace.h \
		cook/expr/position.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/expr/position.c
	mv position.$(OBJEXT) cook/expr/position.$(OBJEXT)

cook/fingerprint.$(OBJEXT): cook/fingerprint.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/trace.h cook/fingerprint.h \
		cook/fingerprint/find.h cook/fingerprint/record.h \
		cook/fingerprint/subdir.h cook/fingerprint/value.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint.c
	mv fingerprint.$(OBJEXT) cook/fingerprint.$(OBJEXT)

cook/fingerprint/calc_string.$(OBJEXT): cook/fingerprint/calc_string.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/fp.h common/fp/combined.h \
		common/main.h common/str.h common/trace.h \
		cook/fingerprint.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/calc_string.c
	mv calc_string.$(OBJEXT) cook/fingerprint/calc_string.$(OBJEXT)

cook/fingerprint/calculate.$(OBJEXT): cook/fingerprint/calculate.c \
		common/ac/errno.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/fp.h common/fp/combined.h \
		common/main.h common/noreturn.h common/str.h \
		common/sub.h common/trace.h cook/archive.h \
		cook/fingerprint.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/calculate.c
	mv calculate.$(OBJEXT) cook/fingerprint/calculate.$(OBJEXT)

cook/fingerprint/filename.$(OBJEXT): cook/fingerprint/filename.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/progname.h \
		common/str.h cook/fingerprint/filename.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/filename.c
	mv filename.$(OBJEXT) cook/fingerprint/filename.$(OBJEXT)

cook/fingerprint/find.$(OBJEXT): cook/fingerprint/find.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/os_path_cat.h common/quit.h common/str.h \
		common/str_list.h common/symtab.h common/trace.h \
		cook/fingerprint/find.h cook/fingerprint/record.h \
		cook/fingerprint/subdir.h cook/fingerprint/value.h \
		cook/option.h cook/os/rel_if_poss.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/find.c
	mv find.$(OBJEXT) cook/fingerprint/find.$(OBJEXT)

cook/fingerprint/gram.yacc.c cook/fingerprint/gram.yacc.h: \
		cook/fingerprint/gram.y
	$(YACC) -d cook/fingerprint/gram.y
	sed -e 's/yy\|YY_YY/fingerprint_gram_/g' y.tab.c > \
		cook/fingerprint/gram.yacc.c
	sed -e 's/yy\|YY_YY/fingerprint_gram_/g' y.tab.h > \
		cook/fingerprint/gram.yacc.h
	rm y.tab.c y.tab.h

cook/fingerprint/gram.yacc.$(OBJEXT): cook/fingerprint/gram.yacc.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/trace.h cook/fingerprint/find.h \
		cook/fingerprint/gram.h cook/fingerprint/lex.h \
		cook/fingerprint/subdir.h cook/fingerprint/value.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/gram.yacc.c
	mv gram.yacc.$(OBJEXT) cook/fingerprint/gram.yacc.$(OBJEXT)

cook/fingerprint/ingredients.$(OBJEXT): cook/fingerprint/ingredients.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/format_print.h common/main.h \
		common/str.h common/trace.h cook/fingerprint.h \
		cook/fingerprint/value.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/ingredients.c
	mv ingredients.$(OBJEXT) cook/fingerprint/ingredients.$(OBJEXT)

cook/fingerprint/lex.$(OBJEXT): cook/fingerprint/lex.c common/ac/ctype.h \
		common/ac/errno.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/input.h \
		common/input/file_text.h common/input/null.h \
		common/main.h common/noreturn.h common/str.h \
		common/sub.h cook/fingerprint/gram.yacc.h \
		cook/fingerprint/lex.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/lex.c
	mv lex.$(OBJEXT) cook/fingerprint/lex.$(OBJEXT)

cook/fingerprint/record.$(OBJEXT): cook/fingerprint/record.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/trace.h \
		cook/fingerprint/record.h cook/fingerprint/subdir.h \
		cook/fingerprint/value.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/record.c
	mv record.$(OBJEXT) cook/fingerprint/record.$(OBJEXT)

cook/fingerprint/subdir.$(OBJEXT): cook/fingerprint/subdir.c \
		common/ac/dirent.h common/ac/errno.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/ac/unistd.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/os_path_cat.h common/star.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h cook/fingerprint.h \
		cook/fingerprint/filename.h cook/fingerprint/find.h \
		cook/fingerprint/gram.h cook/fingerprint/record.h \
		cook/fingerprint/subdir.h cook/fingerprint/value.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/subdir.c
	mv subdir.$(OBJEXT) cook/fingerprint/subdir.$(OBJEXT)

cook/fingerprint/sync.$(OBJEXT): cook/fingerprint/sync.c \
		common/ac/time.h common/main.h cook/fingerprint/find.h \
		cook/fingerprint/sync.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/sync.c
	mv sync.$(OBJEXT) cook/fingerprint/sync.$(OBJEXT)

cook/fingerprint/value.$(OBJEXT): cook/fingerprint/value.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/trace.h \
		cook/fingerprint/value.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/fingerprint/value.c
	mv value.$(OBJEXT) cook/fingerprint/value.$(OBJEXT)

cook/flag.$(OBJEXT): cook/flag.c common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/itab.h common/main.h \
		common/mem.h common/noreturn.h common/star.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h cook/expr/position.h \
		cook/flag.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/flag.c
	mv flag.$(OBJEXT) cook/flag.$(OBJEXT)

cook/function.$(OBJEXT): cook/function.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h common/trace.h \
		cook/function.h cook/id.h cook/id/function.h \
		cook/id/global.h cook/opcode/label.h cook/opcode/list.h \
		cook/opcode/postlude.h cook/opcode/prelude.h \
		cook/option.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/function.c
	mv function.$(OBJEXT) cook/function.$(OBJEXT)

cook/graph.$(OBJEXT): cook/graph.c common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h common/symtab.h \
		cook/graph.h cook/graph/file.h cook/graph/file_pair.h \
		cook/graph/recipe_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph.c
	mv graph.$(OBJEXT) cook/graph.$(OBJEXT)

cook/graph/build.$(OBJEXT): cook/graph/build.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/error.h common/error_intl.h common/format_print.h \
		common/main.h common/noreturn.h common/star.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h cook/cascade.h \
		cook/cook.h cook/desist.h cook/expr.h \
		cook/expr/position.h cook/fingerprint/sync.h \
		cook/graph.h cook/graph/build.h cook/graph/edge_type.h \
		cook/graph/file.h cook/graph/file_list.h \
		cook/graph/file_pair.h cook/graph/leaf.h \
		cook/graph/recipe.h cook/graph/recipe_list.h cook/id.h \
		cook/id/variable.h cook/match.h \
		cook/match/new_by_recip.h cook/match/wl.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/status.h cook/option.h cook/os_interface.h \
		cook/recipe.h cook/recipe/list.h cook/strip_dot.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/build.c
	mv build.$(OBJEXT) cook/graph/build.$(OBJEXT)

cook/graph/check.$(OBJEXT): cook/graph/check.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/cook.h \
		cook/expr/position.h cook/graph/check.h \
		cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/recipe.h \
		cook/graph/walk.h cook/opcode/context.h \
		cook/opcode/status.h cook/option.h cook/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/check.c
	mv check.$(OBJEXT) cook/graph/check.$(OBJEXT)

cook/graph/edge_type.$(OBJEXT): cook/graph/edge_type.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		cook/graph/edge_type.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/edge_type.c
	mv edge_type.$(OBJEXT) cook/graph/edge_type.$(OBJEXT)

cook/graph/file.$(OBJEXT): cook/graph/file.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/trace.h \
		cook/graph/file.h cook/graph/recipe_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/file.c
	mv file.$(OBJEXT) cook/graph/file.$(OBJEXT)

cook/graph/file_list.$(OBJEXT): cook/graph/file_list.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/trace.h cook/graph/edge_type.h \
		cook/graph/file.h cook/graph/file_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/file_list.c
	mv file_list.$(OBJEXT) cook/graph/file_list.$(OBJEXT)

cook/graph/file_pair.$(OBJEXT): cook/graph/file_pair.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/str.h \
		common/str_list.h common/sub.h common/symtab.h \
		common/trace.h cook/expr/position.h cook/graph.h \
		cook/graph/file_pair.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/file_pair.c
	mv file_pair.$(OBJEXT) cook/graph/file_pair.$(OBJEXT)

cook/graph/leaf.$(OBJEXT): cook/graph/leaf.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h cook/cook.h \
		cook/graph/leaf.h cook/id.h cook/id/global.h \
		cook/id/variable.h cook/match.h \
		cook/match/new_by_recip.h cook/opcode/context.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/leaf.c
	mv leaf.$(OBJEXT) cook/graph/leaf.$(OBJEXT)

cook/graph/pairs.$(OBJEXT): cook/graph/pairs.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/trace.h cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/pairs.h \
		cook/graph/recipe.h cook/graph/walk.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/pairs.c
	mv pairs.$(OBJEXT) cook/graph/pairs.$(OBJEXT)

cook/graph/recipe.$(OBJEXT): cook/graph/recipe.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/star.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/cook.h cook/dir_part.h \
		cook/expr/position.h cook/graph/edge_type.h \
		cook/graph/file.h cook/graph/file_list.h \
		cook/graph/recipe.h cook/id.h cook/match.h \
		cook/opcode/context.h cook/opcode/status.h cook/option.h \
		cook/os_interface.h cook/recipe.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/recipe.c
	mv recipe.$(OBJEXT) cook/graph/recipe.$(OBJEXT)

cook/graph/recipe_list.$(OBJEXT): cook/graph/recipe_list.c \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/trace.h cook/graph/recipe.h \
		cook/graph/recipe_list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/recipe_list.c
	mv recipe_list.$(OBJEXT) cook/graph/recipe_list.$(OBJEXT)

cook/graph/run.$(OBJEXT): cook/graph/run.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/ac/time.h common/ac/unistd.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/os_path_cat.h common/str.h common/str_list.h \
		common/sub.h common/trace.h common/ts.h cook/cook.h \
		cook/dir_part.h cook/expr/position.h cook/fingerprint.h \
		cook/graph.h cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/file_pair.h \
		cook/graph/recipe.h cook/graph/run.h cook/graph/walk.h \
		cook/id.h cook/id/variable.h cook/match.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/status.h cook/option.h cook/os_interface.h \
		cook/recipe.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/run.c
	mv run.$(OBJEXT) cook/graph/run.$(OBJEXT)

cook/graph/script.$(OBJEXT): cook/graph/script.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/star.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		cook/dir_part.h cook/expr/position.h \
		cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/recipe.h \
		cook/graph/script.h cook/graph/walk.h cook/id.h \
		cook/id/variable.h cook/match.h cook/opcode/context.h \
		cook/opcode/status.h cook/option.h cook/os_interface.h \
		cook/recipe.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/script.c
	mv script.$(OBJEXT) cook/graph/script.$(OBJEXT)

cook/graph/stats.$(OBJEXT): cook/graph/stats.c common/ac/stdio.h \
		common/main.h common/star.h cook/graph.h \
		cook/graph/stats.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/stats.c
	mv stats.$(OBJEXT) cook/graph/stats.$(OBJEXT)

cook/graph/walk.$(OBJEXT): cook/graph/walk.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/time.h common/error_intl.h \
		common/format_print.h common/itab.h common/main.h \
		common/noreturn.h common/star.h common/str.h \
		common/str_list.h common/sub.h common/symtab.h \
		common/trace.h cook/desist.h cook/expr/position.h \
		cook/fingerprint/sync.h cook/graph.h cook/graph/check.h \
		cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/pairs.h \
		cook/graph/recipe.h cook/graph/recipe_list.h \
		cook/graph/run.h cook/graph/script.h cook/graph/walk.h \
		cook/id.h cook/id/variable.h cook/meter.h \
		cook/opcode/context.h cook/opcode/status.h cook/option.h \
		cook/os/wait.h cook/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/walk.c
	mv walk.$(OBJEXT) cook/graph/walk.$(OBJEXT)

cook/graph/web.$(OBJEXT): cook/graph/web.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/symtab.h \
		common/trace.h cook/dir_part.h cook/expr/position.h \
		cook/graph.h cook/graph/edge_type.h cook/graph/file.h \
		cook/graph/file_list.h cook/graph/recipe.h \
		cook/graph/recipe_list.h cook/graph/web.h cook/id.h \
		cook/id/variable.h cook/opcode/context.h \
		cook/opcode/status.h cook/option.h cook/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/graph/web.c
	mv web.$(OBJEXT) cook/graph/web.$(OBJEXT)

cook/hashline.yacc.c cook/hashline.yacc.h: cook/hashline.y
	$(YACC) -d cook/hashline.y
	sed -e 's/yy\|YY_YY/hashline_/g' y.tab.c > cook/hashline.yacc.c
	sed -e 's/yy\|YY_YY/hashline_/g' y.tab.h > cook/hashline.yacc.h
	rm y.tab.c y.tab.h

cook/hashline.yacc.$(OBJEXT): cook/hashline.yacc.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h \
		common/format_print.h common/main.h common/mem.h \
		common/os_path_cat.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/cook.h cook/expr.h \
		cook/expr/catenate.h cook/expr/constant.h \
		cook/expr/function.h cook/expr/list.h \
		cook/expr/position.h cook/hashline.h cook/lex.h \
		cook/opcode/context.h cook/opcode/status.h cook/option.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/hashline.yacc.c
	mv hashline.yacc.$(OBJEXT) cook/hashline.yacc.$(OBJEXT)

cook/id.$(OBJEXT): cook/id.c common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdlib.h common/format_print.h common/main.h \
		common/mem.h common/progname.h common/str.h \
		common/str_list.h common/symtab.h common/trace.h \
		common/version-stmp.h cook/id.h cook/id/global.h \
		cook/id/private.h cook/id/variable.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id.c
	mv id.$(OBJEXT) cook/id.$(OBJEXT)

cook/id/builtin.$(OBJEXT): cook/id/builtin.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/builtin/private.h cook/expr/position.h cook/id.h \
		cook/id/builtin.h cook/id/private.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/builtin.c
	mv builtin.$(OBJEXT) cook/id/builtin.$(OBJEXT)

cook/id/function.$(OBJEXT): cook/id/function.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h cook/id.h \
		cook/id/function.h cook/id/private.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/function.c
	mv function.$(OBJEXT) cook/id/function.$(OBJEXT)

cook/id/global.$(OBJEXT): cook/id/global.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/symtab.h cook/id.h \
		cook/id/global.h cook/id/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/global.c
	mv global.$(OBJEXT) cook/id/global.$(OBJEXT)

cook/id/nothing.$(OBJEXT): cook/id/nothing.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h cook/id.h \
		cook/id/nothing.h cook/id/private.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/nothing.c
	mv nothing.$(OBJEXT) cook/id/nothing.$(OBJEXT)

cook/id/private.$(OBJEXT): cook/id/private.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h cook/id.h cook/id/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/private.c
	mv private.$(OBJEXT) cook/id/private.$(OBJEXT)

cook/id/variable.$(OBJEXT): cook/id/variable.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/expr/position.h cook/id.h \
		cook/id/private.h cook/id/variable.h \
		cook/opcode/context.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/id/variable.c
	mv variable.$(OBJEXT) cook/id/variable.$(OBJEXT)

cook/lex.$(OBJEXT): cook/lex.c common/ac/ctype.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/error.h common/error_intl.h \
		common/format_print.h common/input.h \
		common/input/file_text.h common/main.h common/mem.h \
		common/noreturn.h common/star.h common/str.h \
		common/str_list.h common/stracc.h common/sub.h \
		common/symtab.h common/trace.h cook/expr.h \
		cook/expr/list.h cook/expr/position.h cook/hashline.h \
		cook/hashline.yacc.h cook/lex.h cook/lex/filename.h \
		cook/lex/filenamelist.h cook/option.h cook/parse.yacc.h \
		cook/stmt.h cook/stmt/list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/lex.c
	mv lex.$(OBJEXT) cook/lex.$(OBJEXT)

cook/lex/filename.$(OBJEXT): cook/lex/filename.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h cook/lex/filename.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/lex/filename.c
	mv filename.$(OBJEXT) cook/lex/filename.$(OBJEXT)

cook/lex/filenamelist.$(OBJEXT): cook/lex/filenamelist.c \
		common/ac/stddef.h common/main.h common/mem.h \
		cook/lex/filename.h cook/lex/filenamelist.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/lex/filenamelist.c
	mv filenamelist.$(OBJEXT) cook/lex/filenamelist.$(OBJEXT)

cook/listing.$(OBJEXT): cook/listing.c common/ac/signal.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h common/ac/unistd.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/quit.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		cook/listing.h cook/option.h cook/os/wait.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/listing.c
	mv listing.$(OBJEXT) cook/listing.$(OBJEXT)

cook/main.$(OBJEXT): cook/main.c common/ac/signal.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h common/arglex.h \
		common/error_intl.h common/fflush_slow.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/quit.h \
		common/star.h common/str.h common/str_list.h \
		common/sub.h common/trace.h common/version.h \
		cook/builtin.h cook/cook.h cook/fingerprint.h cook/id.h \
		cook/id/variable.h cook/lex.h cook/listing.h \
		cook/opcode/context.h cook/opcode/status.h cook/option.h \
		cook/parse.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/main.c
	mv main.$(OBJEXT) cook/main.$(OBJEXT)

cook/match.$(OBJEXT): cook/match.c common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/trace.h cook/expr/position.h \
		cook/match.h cook/match/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match.c
	mv match.$(OBJEXT) cook/match.$(OBJEXT)

cook/match/cook.$(OBJEXT): cook/match/cook.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/stracc.h common/sub.h common/trace.h \
		cook/expr/position.h cook/match.h cook/match/cook.h \
		cook/match/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/cook.c
	mv cook.$(OBJEXT) cook/match/cook.$(OBJEXT)

cook/match/new.$(OBJEXT): cook/match/new.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h cook/match.h \
		cook/match/cook.h cook/match/private.h \
		cook/match/regex.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/new.c
	mv new.$(OBJEXT) cook/match/new.$(OBJEXT)

cook/match/new_by_recip.$(OBJEXT): cook/match/new_by_recip.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/expr/position.h cook/match.h \
		cook/match/new_by_recip.h cook/option.h cook/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/new_by_recip.c
	mv new_by_recip.$(OBJEXT) cook/match/new_by_recip.$(OBJEXT)

cook/match/private.$(OBJEXT): cook/match/private.c common/ac/stddef.h \
		common/main.h common/mem.h cook/match.h \
		cook/match/private.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/private.c
	mv private.$(OBJEXT) cook/match/private.$(OBJEXT)

cook/match/regex.$(OBJEXT): cook/match/regex.c common/ac/regex.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/stracc.h common/sub.h common/trace.h \
		cook/expr/position.h cook/match.h cook/match/private.h \
		cook/match/regex.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/regex.c
	mv regex.$(OBJEXT) cook/match/regex.$(OBJEXT)

cook/match/stack.$(OBJEXT): cook/match/stack.c common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/trace.h cook/match.h cook/match/stack.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/stack.c
	mv stack.$(OBJEXT) cook/match/stack.$(OBJEXT)

cook/match/wl.$(OBJEXT): cook/match/wl.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/expr/position.h cook/match.h cook/match/wl.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/match/wl.c
	mv wl.$(OBJEXT) cook/match/wl.$(OBJEXT)

cook/meter.$(OBJEXT): cook/meter.c common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h common/main.h \
		common/mem.h cook/meter.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/meter.c
	mv meter.$(OBJEXT) cook/meter.$(OBJEXT)

cook/opcode.$(OBJEXT): cook/opcode.c common/ac/stddef.h \
		common/ac/stdio.h common/format_print.h common/main.h \
		common/mem.h common/trace.h cook/opcode.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode.c
	mv opcode.$(OBJEXT) cook/opcode.$(OBJEXT)

cook/opcode/assign.$(OBJEXT): cook/opcode/assign.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/expr/position.h cook/id.h \
		cook/id/variable.h cook/opcode.h cook/opcode/assign.h \
		cook/opcode/context.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/assign.c
	mv assign.$(OBJEXT) cook/opcode/assign.$(OBJEXT)

cook/opcode/assign_appen.$(OBJEXT): cook/opcode/assign_appen.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/expr/position.h \
		cook/id.h cook/id/nothing.h cook/id/variable.h \
		cook/opcode.h cook/opcode/assign_appen.h \
		cook/opcode/context.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/assign_appen.c
	mv assign_appen.$(OBJEXT) cook/opcode/assign_appen.$(OBJEXT)

cook/opcode/assign_local.$(OBJEXT): cook/opcode/assign_local.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/expr/position.h \
		cook/id.h cook/id/variable.h cook/opcode.h \
		cook/opcode/assign_local.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/assign_local.c
	mv assign_local.$(OBJEXT) cook/opcode/assign_local.$(OBJEXT)

cook/opcode/cascade.$(OBJEXT): cook/opcode/cascade.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		cook/cascade.h cook/cook.h cook/expr/position.h \
		cook/opcode.h cook/opcode/cascade.h \
		cook/opcode/context.h cook/opcode/private.h \
		cook/opcode/status.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/cascade.c
	mv cascade.$(OBJEXT) cook/opcode/cascade.$(OBJEXT)

cook/opcode/catenate.$(OBJEXT): cook/opcode/catenate.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/opcode.h \
		cook/opcode/catenate.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/catenate.c
	mv catenate.$(OBJEXT) cook/opcode/catenate.$(OBJEXT)

cook/opcode/command.$(OBJEXT): cook/opcode/command.c common/ac/errno.h \
		common/ac/fcntl.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/ac/time.h common/ac/unistd.h common/error.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/star.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/expr/position.h cook/flag.h \
		cook/id.h cook/id/variable.h cook/meter.h cook/opcode.h \
		cook/opcode/command.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/status.h cook/option.h \
		cook/os_interface.h cook/tempfilename.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/command.c
	mv command.$(OBJEXT) cook/opcode/command.$(OBJEXT)

cook/opcode/context.$(OBJEXT): cook/opcode/context.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/symtab.h common/trace.h \
		cook/desist.h cook/id.h cook/id/global.h \
		cook/id/variable.h cook/match.h cook/match/stack.h \
		cook/meter.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/list.h cook/opcode/status.h \
		cook/opcode/thread-id.h cook/option.h cook/os/wait.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/context.c
	mv context.$(OBJEXT) cook/opcode/context.$(OBJEXT)

cook/opcode/fail.$(OBJEXT): cook/opcode/fail.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/trace.h \
		cook/opcode.h cook/opcode/context.h cook/opcode/fail.h \
		cook/opcode/private.h cook/opcode/status.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/fail.c
	mv fail.$(OBJEXT) cook/opcode/fail.$(OBJEXT)

cook/opcode/function.$(OBJEXT): cook/opcode/function.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/builtin.h cook/expr.h \
		cook/expr/position.h cook/function.h cook/id.h \
		cook/id/nothing.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/function.h cook/opcode/list.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/function.c
	mv function.$(OBJEXT) cook/opcode/function.$(OBJEXT)

cook/opcode/gosub.$(OBJEXT): cook/opcode/gosub.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/expr/position.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/gosub.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/gosub.c
	mv gosub.$(OBJEXT) cook/opcode/gosub.$(OBJEXT)

cook/opcode/goto.$(OBJEXT): cook/opcode/goto.c common/ac/stddef.h \
		common/ac/stdio.h common/format_print.h common/main.h \
		common/trace.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/goto.h cook/opcode/label.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/goto.c
	mv goto.$(OBJEXT) cook/opcode/goto.$(OBJEXT)

cook/opcode/jmpf.$(OBJEXT): cook/opcode/jmpf.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/jmpf.h \
		cook/opcode/label.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/jmpf.c
	mv jmpf.$(OBJEXT) cook/opcode/jmpf.$(OBJEXT)

cook/opcode/jmpt.$(OBJEXT): cook/opcode/jmpt.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/jmpt.h \
		cook/opcode/label.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/jmpt.c
	mv jmpt.$(OBJEXT) cook/opcode/jmpt.$(OBJEXT)

cook/opcode/label.$(OBJEXT): cook/opcode/label.c common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/trace.h cook/opcode/label.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/label.c
	mv label.$(OBJEXT) cook/opcode/label.$(OBJEXT)

cook/opcode/list.$(OBJEXT): cook/opcode/list.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/fflush_slow.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h cook/match.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/list.c
	mv list.$(OBJEXT) cook/opcode/list.$(OBJEXT)

cook/opcode/postlude.$(OBJEXT): cook/opcode/postlude.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/id.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/postlude.h \
		cook/opcode/private.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/postlude.c
	mv postlude.$(OBJEXT) cook/opcode/postlude.$(OBJEXT)

cook/opcode/prelude.$(OBJEXT): cook/opcode/prelude.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h cook/id.h \
		cook/id/variable.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/prelude.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/prelude.c
	mv prelude.$(OBJEXT) cook/opcode/prelude.$(OBJEXT)

cook/opcode/private.$(OBJEXT): cook/opcode/private.c common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/trace.h cook/opcode.h cook/opcode/private.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/private.c
	mv private.$(OBJEXT) cook/opcode/private.$(OBJEXT)

cook/opcode/push.$(OBJEXT): cook/opcode/push.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/opcode.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/push.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/push.c
	mv push.$(OBJEXT) cook/opcode/push.$(OBJEXT)

cook/opcode/recipe.$(OBJEXT): cook/opcode/recipe.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/cook.h \
		cook/expr/position.h cook/flag.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/private.h cook/opcode/recipe.h \
		cook/opcode/status.h cook/option.h cook/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/recipe.c
	mv recipe.$(OBJEXT) cook/opcode/recipe.$(OBJEXT)

cook/opcode/set.$(OBJEXT): cook/opcode/set.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h cook/expr/position.h \
		cook/flag.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/set.h \
		cook/opcode/status.h cook/option.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/set.c
	mv set.$(OBJEXT) cook/opcode/set.$(OBJEXT)

cook/opcode/setenv.$(OBJEXT): cook/opcode/setenv.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/env.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/expr/position.h \
		cook/opcode.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/setenv.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/setenv.c
	mv setenv.$(OBJEXT) cook/opcode/setenv.$(OBJEXT)

cook/opcode/setenv_appen.$(OBJEXT): cook/opcode/setenv_appen.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/env.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/expr/position.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/private.h \
		cook/opcode/setenv_appen.h cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/setenv_appen.c
	mv setenv_appen.$(OBJEXT) cook/opcode/setenv_appen.$(OBJEXT)

cook/opcode/status.$(OBJEXT): cook/opcode/status.c common/main.h \
		cook/opcode/status.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/status.c
	mv status.$(OBJEXT) cook/opcode/status.$(OBJEXT)

cook/opcode/string.$(OBJEXT): cook/opcode/string.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h \
		common/format_print.h common/main.h common/str.h \
		common/trace.h cook/expr/position.h cook/match.h \
		cook/opcode.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/status.h \
		cook/opcode/string.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/string.c
	mv string.$(OBJEXT) cook/opcode/string.$(OBJEXT)

cook/opcode/thread-id.$(OBJEXT): cook/opcode/thread-id.c \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/trace.h cook/opcode/thread-id.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/thread-id.c
	mv thread-id.$(OBJEXT) cook/opcode/thread-id.$(OBJEXT)

cook/opcode/touch.$(OBJEXT): cook/opcode/touch.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/time.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h cook/opcode.h \
		cook/opcode/context.h cook/opcode/private.h \
		cook/opcode/status.h cook/opcode/touch.h cook/option.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/touch.c
	mv touch.$(OBJEXT) cook/opcode/touch.$(OBJEXT)

cook/opcode/unsetenv.$(OBJEXT): cook/opcode/unsetenv.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/env.h common/error_intl.h common/format_print.h \
		common/main.h common/noreturn.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		cook/expr/position.h cook/opcode.h cook/opcode/context.h \
		cook/opcode/private.h cook/opcode/status.h \
		cook/opcode/unsetenv.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/opcode/unsetenv.c
	mv unsetenv.$(OBJEXT) cook/opcode/unsetenv.$(OBJEXT)

cook/option.$(OBJEXT): cook/option.c common/ac/ctype.h \
		common/ac/limits.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/ac/time.h common/format_print.h common/libdir.h \
		common/main.h common/mem.h common/progname.h \
		common/str.h common/str_list.h common/trace.h \
		cook/option.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/option.c
	mv option.$(OBJEXT) cook/option.$(OBJEXT)

cook/os.$(OBJEXT): cook/os.c common/ac/errno.h common/ac/fcntl.h \
		common/ac/limits.h common/ac/signal.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h common/ac/unistd.h \
		common/ac/utime.h common/error_intl.h common/exeext.h \
		common/format_print.h common/home_directo.h \
		common/main.h common/mem.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/archive.h cook/option.h \
		cook/os/wait.h cook/os_interface.h cook/stat.cache.h \
		cook/tempfilename.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os.c
	mv os.$(OBJEXT) cook/os.$(OBJEXT)

cook/os/below_dir.$(OBJEXT): cook/os/below_dir.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/os/below_dir.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/below_dir.c
	mv below_dir.$(OBJEXT) cook/os/below_dir.$(OBJEXT)

cook/os/dirnam_relat.$(OBJEXT): cook/os/dirnam_relat.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/ac/time.h common/format_print.h common/main.h \
		common/str.h common/str_list.h common/trace.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/dirnam_relat.c
	mv dirnam_relat.$(OBJEXT) cook/os/dirnam_relat.$(OBJEXT)

cook/os/pathname.$(OBJEXT): cook/os/pathname.c common/ac/errno.h \
		common/ac/mntent.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/stdlib.h common/ac/string.h \
		common/ac/time.h common/ac/unistd.h common/error.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/os_path_cat.h \
		common/str.h common/str_list.h common/sub.h \
		common/trace.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/pathname.c
	mv pathname.$(OBJEXT) cook/os/pathname.$(OBJEXT)

cook/os/rel_if_poss.$(OBJEXT): cook/os/rel_if_poss.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h cook/os/below_dir.h \
		cook/os/rel_if_poss.h cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/rel_if_poss.c
	mv rel_if_poss.$(OBJEXT) cook/os/rel_if_poss.$(OBJEXT)

cook/os/symlink.$(OBJEXT): cook/os/symlink.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/time.h common/ac/unistd.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		cook/os_interface.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/symlink.c
	mv symlink.$(OBJEXT) cook/os/symlink.$(OBJEXT)

cook/os/wait.$(OBJEXT): cook/os/wait.c common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/trace.h cook/os/wait.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/os/wait.c
	mv wait.$(OBJEXT) cook/os/wait.$(OBJEXT)

cook/parse.yacc.c cook/parse.yacc.h: cook/parse.y
	$(YACC) -d cook/parse.y
	sed -e 's/yy\|YY_YY/parse_/g' y.tab.c > cook/parse.yacc.c
	sed -e 's/yy\|YY_YY/parse_/g' y.tab.h > cook/parse.yacc.h
	rm y.tab.c y.tab.h

cook/parse.yacc.$(OBJEXT): cook/parse.yacc.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/format_print.h common/main.h common/mem.h \
		common/star.h common/str.h common/str_list.h \
		common/sub.h common/symtab.h common/trace.h cook/expr.h \
		cook/expr/catenate.h cook/expr/constant.h \
		cook/expr/function.h cook/expr/list.h \
		cook/expr/position.h cook/function.h cook/lex.h \
		cook/option.h cook/parse.h cook/stmt.h \
		cook/stmt/append.h cook/stmt/assign.h \
		cook/stmt/command.h cook/stmt/compound.h \
		cook/stmt/fail.h cook/stmt/gosub.h cook/stmt/if.h \
		cook/stmt/list.h cook/stmt/loop.h cook/stmt/loopvar.h \
		cook/stmt/nop.h cook/stmt/recipe.h cook/stmt/return.h \
		cook/stmt/set.h cook/stmt/unsetenv.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/parse.yacc.c
	mv parse.yacc.$(OBJEXT) cook/parse.yacc.$(OBJEXT)

cook/recipe.$(OBJEXT): cook/recipe.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		cook/expr.h cook/expr/position.h cook/flag.h \
		cook/match.h cook/match/new_by_recip.h cook/match/wl.h \
		cook/opcode/list.h cook/option.h cook/recipe.h \
		cook/stmt.h cook/strip_dot.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/recipe.c
	mv recipe.$(OBJEXT) cook/recipe.$(OBJEXT)

cook/recipe/list.$(OBJEXT): cook/recipe/list.c common/ac/stddef.h \
		common/error.h common/format_print.h common/main.h \
		common/mem.h common/noreturn.h common/trace.h \
		cook/expr/position.h cook/recipe.h cook/recipe/list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/recipe/list.c
	mv list.$(OBJEXT) cook/recipe/list.$(OBJEXT)

cook/stat.cache.$(OBJEXT): cook/stat.cache.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/ac/time.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/symtab.h common/trace.h \
		cook/archive.h cook/fingerprint.h \
		cook/fingerprint/value.h cook/option.h cook/stat.cache.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stat.cache.c
	mv stat.cache.$(OBJEXT) cook/stat.cache.$(OBJEXT)

cook/stmt.$(OBJEXT): cook/stmt.c common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/star.h common/str.h common/str_list.h \
		common/trace.h cook/desist.h cook/match.h \
		cook/opcode/context.h cook/opcode/list.h \
		cook/opcode/status.h cook/option.h cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt.c
	mv stmt.$(OBJEXT) cook/stmt.$(OBJEXT)

cook/stmt/append.$(OBJEXT): cook/stmt/append.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/trace.h cook/expr.h \
		cook/expr/constant.h cook/expr/list.h \
		cook/expr/position.h cook/opcode.h \
		cook/opcode/assign_appen.h cook/opcode/cascade.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/setenv_appen.h cook/opcode/status.h \
		cook/stmt.h cook/stmt/append.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/append.c
	mv append.$(OBJEXT) cook/stmt/append.$(OBJEXT)

cook/stmt/assign.$(OBJEXT): cook/stmt/assign.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/trace.h cook/expr.h \
		cook/expr/constant.h cook/expr/list.h \
		cook/expr/position.h cook/opcode.h cook/opcode/assign.h \
		cook/opcode/assign_local.h cook/opcode/cascade.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/setenv.h cook/opcode/status.h cook/stmt.h \
		cook/stmt/assign.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/assign.c
	mv assign.$(OBJEXT) cook/stmt/assign.$(OBJEXT)

cook/stmt/command.$(OBJEXT): cook/stmt/command.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr.h cook/expr/list.h cook/expr/position.h \
		cook/opcode.h cook/opcode/command.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h cook/stmt.h \
		cook/stmt/command.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/command.c
	mv command.$(OBJEXT) cook/stmt/command.$(OBJEXT)

cook/stmt/compound.$(OBJEXT): cook/stmt/compound.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/stmt.h cook/stmt/compound.h cook/stmt/list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/compound.c
	mv compound.$(OBJEXT) cook/stmt/compound.$(OBJEXT)

cook/stmt/fail.$(OBJEXT): cook/stmt/fail.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr/list.h cook/opcode.h cook/opcode/fail.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/status.h cook/stmt.h cook/stmt/fail.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/fail.c
	mv fail.$(OBJEXT) cook/stmt/fail.$(OBJEXT)

cook/stmt/gosub.$(OBJEXT): cook/stmt/gosub.c common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h common/trace.h cook/expr/list.h \
		cook/expr/position.h cook/opcode.h \
		cook/opcode/function.h cook/opcode/gosub.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/status.h cook/stmt.h cook/stmt/gosub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/gosub.c
	mv gosub.$(OBJEXT) cook/stmt/gosub.$(OBJEXT)

cook/stmt/if.$(OBJEXT): cook/stmt/if.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr.h cook/expr/position.h cook/opcode.h \
		cook/opcode/goto.h cook/opcode/jmpf.h \
		cook/opcode/label.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h cook/stmt.h \
		cook/stmt/if.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/if.c
	mv if.$(OBJEXT) cook/stmt/if.$(OBJEXT)

cook/stmt/list.$(OBJEXT): cook/stmt/list.c common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/trace.h cook/stmt.h cook/stmt/list.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/list.c
	mv list.$(OBJEXT) cook/stmt/list.$(OBJEXT)

cook/stmt/loop.$(OBJEXT): cook/stmt/loop.c common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h common/trace.h cook/expr/position.h \
		cook/opcode/goto.h cook/opcode/label.h \
		cook/opcode/list.h cook/stmt.h cook/stmt/loop.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/loop.c
	mv loop.$(OBJEXT) cook/stmt/loop.$(OBJEXT)

cook/stmt/loopvar.$(OBJEXT): cook/stmt/loopvar.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h cook/expr.h cook/expr/constant.h \
		cook/expr/function.h cook/expr/list.h \
		cook/expr/position.h cook/stmt.h cook/stmt/assign.h \
		cook/stmt/compound.h cook/stmt/if.h cook/stmt/list.h \
		cook/stmt/loop.h cook/stmt/loopvar.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/loopvar.c
	mv loopvar.$(OBJEXT) cook/stmt/loopvar.$(OBJEXT)

cook/stmt/nop.$(OBJEXT): cook/stmt/nop.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/stmt.h cook/stmt/nop.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/nop.c
	mv nop.$(OBJEXT) cook/stmt/nop.$(OBJEXT)

cook/stmt/recipe.$(OBJEXT): cook/stmt/recipe.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr.h cook/expr/list.h cook/expr/position.h \
		cook/opcode.h cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/recipe.h cook/opcode/status.h cook/recipe.h \
		cook/stmt.h cook/stmt/compound.h cook/stmt/list.h \
		cook/stmt/recipe.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/recipe.c
	mv recipe.$(OBJEXT) cook/stmt/recipe.$(OBJEXT)

cook/stmt/return.$(OBJEXT): cook/stmt/return.c common/ac/stddef.h \
		common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h common/trace.h cook/expr/list.h \
		cook/expr/position.h cook/opcode/goto.h \
		cook/opcode/list.h cook/stmt.h cook/stmt/return.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/return.c
	mv return.$(OBJEXT) cook/stmt/return.$(OBJEXT)

cook/stmt/set.$(OBJEXT): cook/stmt/set.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr/list.h cook/expr/position.h cook/opcode.h \
		cook/opcode/list.h cook/opcode/push.h cook/opcode/set.h \
		cook/opcode/status.h cook/stmt.h cook/stmt/set.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/set.c
	mv set.$(OBJEXT) cook/stmt/set.$(OBJEXT)

cook/stmt/touch.$(OBJEXT): cook/stmt/touch.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr/list.h cook/opcode.h cook/opcode/list.h \
		cook/opcode/push.h cook/opcode/status.h \
		cook/opcode/touch.h cook/stmt.h cook/stmt/touch.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/touch.c
	mv touch.$(OBJEXT) cook/stmt/touch.$(OBJEXT)

cook/stmt/unsetenv.$(OBJEXT): cook/stmt/unsetenv.c common/ac/stddef.h \
		common/format_print.h common/main.h common/trace.h \
		cook/expr/list.h cook/expr/position.h cook/opcode.h \
		cook/opcode/list.h cook/opcode/push.h \
		cook/opcode/status.h cook/opcode/unsetenv.h cook/stmt.h \
		cook/stmt/unsetenv.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/stmt/unsetenv.c
	mv unsetenv.$(OBJEXT) cook/stmt/unsetenv.$(OBJEXT)

cook/strip_dot.$(OBJEXT): cook/strip_dot.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/str.h common/str_list.h cook/option.h \
		cook/strip_dot.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/strip_dot.c
	mv strip_dot.$(OBJEXT) cook/strip_dot.$(OBJEXT)

cook/tempfilename.$(OBJEXT): cook/tempfilename.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/unistd.h common/format_print.h common/main.h \
		common/str.h cook/tempfilename.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook/tempfilename.c
	mv tempfilename.$(OBJEXT) cook/tempfilename.$(OBJEXT)

cook_bom/main.$(OBJEXT): cook_bom/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/sub.h common/version.h cook_bom/sniff.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook_bom/main.c
	mv main.$(OBJEXT) cook_bom/main.$(OBJEXT)

cook_bom/sniff.$(OBJEXT): cook_bom/sniff.c common/ac/ctype.h \
		common/ac/dirent.h common/ac/errno.h common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/string.h \
		common/error_intl.h common/format_print.h \
		common/gmatch.h common/main.h common/noreturn.h \
		common/os_path_cat.h common/str.h common/str_list.h \
		common/stracc.h common/sub.h common/symtab.h \
		cook_bom/sniff.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cook_bom/sniff.c
	mv sniff.$(OBJEXT) cook_bom/sniff.$(OBJEXT)

cookfp/main.$(OBJEXT): cookfp/main.c common/ac/errno.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/arglex.h common/error_intl.h \
		common/format_print.h common/fp.h common/fp/cksum.h \
		common/fp/combined.h common/fp/ident.h common/fp/md5.h \
		common/fp/snefru.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cookfp/main.c
	mv main.$(OBJEXT) cookfp/main.$(OBJEXT)

cooktime/date.yacc.c cooktime/date.yacc.h: cooktime/date.y
	$(YACC) -d cooktime/date.y
	sed -e 's/yy\|YY_YY/date_/g' y.tab.c > cooktime/date.yacc.c
	sed -e 's/yy\|YY_YY/date_/g' y.tab.h > cooktime/date.yacc.h
	rm y.tab.c y.tab.h

cooktime/date.yacc.$(OBJEXT): cooktime/date.yacc.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/ac/time.h \
		common/format_print.h common/main.h common/str.h \
		common/trace.h cooktime/date.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cooktime/date.yacc.c
	mv date.yacc.$(OBJEXT) cooktime/date.yacc.$(OBJEXT)

cooktime/main.$(OBJEXT): cooktime/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/ac/time.h common/ac/utime.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/ts.h \
		common/version.h cooktime/date.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c cooktime/main.c
	mv main.$(OBJEXT) cooktime/main.$(OBJEXT)

datadir/.datadir:
	-$(INSTALL) -m 0755 -d $(DATADIR)
	@-test -d $(DATADIR) && touch $@
	@sleep 1

$(DATADIR)/as: datadir/as datadir/.datadir
	$(INSTALL_DATA) datadir/as $@

$(DATADIR)/bison: datadir/bison datadir/.datadir
	$(INSTALL_DATA) datadir/bison $@

$(DATADIR)/c: datadir/c datadir/.datadir
	$(INSTALL_DATA) datadir/c $@

$(DATADIR)/c++: datadir/c++ datadir/.datadir
	$(INSTALL_DATA) datadir/c++ $@

$(DATADIR)/f77: datadir/f77 datadir/.datadir
	$(INSTALL_DATA) datadir/f77 $@

$(DATADIR)/functions: datadir/functions datadir/.datadir
	$(INSTALL_DATA) datadir/functions $@

$(DATADIR)/g77: datadir/g77 datadir/.datadir
	$(INSTALL_DATA) datadir/g77 $@

$(DATADIR)/gcc: datadir/gcc datadir/.datadir
	$(INSTALL_DATA) datadir/gcc $@

$(DATADIR)/home: datadir/home datadir/.datadir
	$(INSTALL_DATA) datadir/home $@

$(DATADIR)/host_lists.pl: datadir/host_lists.pl datadir/.datadir
	$(INSTALL_DATA) datadir/host_lists.pl $@

$(DATADIR)/java: datadir/java datadir/.datadir
	$(INSTALL_DATA) datadir/java $@

$(DATADIR)/lex: datadir/lex datadir/.datadir
	$(INSTALL_DATA) datadir/lex $@

$(DATADIR)/library: datadir/library datadir/.datadir
	$(INSTALL_DATA) datadir/library $@

$(DATADIR)/print: datadir/print datadir/.datadir
	$(INSTALL_DATA) datadir/print $@

$(DATADIR)/program: datadir/program datadir/.datadir
	$(INSTALL_DATA) datadir/program $@

$(DATADIR)/rcs: datadir/rcs datadir/.datadir
	$(INSTALL_DATA) datadir/rcs $@

$(DATADIR)/recursive: datadir/recursive datadir/.datadir
	$(INSTALL_DATA) datadir/recursive $@

$(DATADIR)/sccs: datadir/sccs datadir/.datadir
	$(INSTALL_DATA) datadir/sccs $@

$(DATADIR)/text: datadir/text datadir/.datadir
	$(INSTALL_DATA) datadir/text $@

$(DATADIR)/usr: datadir/usr datadir/.datadir
	$(INSTALL_DATA) datadir/usr $@

$(DATADIR)/usr.local: datadir/usr.local datadir/.datadir
	$(INSTALL_DATA) datadir/usr.local $@

$(DATADIR)/yacc: datadir/yacc datadir/.datadir
	$(INSTALL_DATA) datadir/yacc $@

$(DATADIR)/yacc_many: datadir/yacc_many datadir/.datadir
	$(INSTALL_DATA) datadir/yacc_many $@

etc/Howto.conf: etc/Howto.conf.in ./config.status
	CONFIG_FILES=$@:etc/Howto.conf.in CONFIG_HEADERS= $(SH) ./config.status

etc/libdir-h: etc/libdir-h.in ./config.status
	CONFIG_FILES=$@:etc/libdir-h.in CONFIG_HEADERS= $(SH) ./config.status

etc/libdir.so: etc/libdir.so.in ./config.status
	CONFIG_FILES=$@:etc/libdir.so.in CONFIG_HEADERS= $(SH) ./config.status

file_check/file_check.$(OBJEXT): file_check/file_check.c \
		common/ac/ctype.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/stdio.h common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/sub.h file_check/file_check.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c file_check/file_check.c
	mv file_check.$(OBJEXT) file_check/file_check.$(OBJEXT)

file_check/main.$(OBJEXT): file_check/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/version.h \
		file_check/file_check.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c file_check/main.c
	mv main.$(OBJEXT) file_check/main.$(OBJEXT)

find_libs/main.$(OBJEXT): find_libs/main.c c_incl/os_interface.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h common/arglex.h \
		common/error_intl.h common/format_print.h common/help.h \
		common/main.h common/mem.h common/noreturn.h \
		common/progname.h common/str.h common/sub.h \
		common/version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c find_libs/main.c
	mv main.$(OBJEXT) find_libs/main.$(OBJEXT)

find_libs/os.$(OBJEXT): find_libs/os.c c_incl/os_interface.h \
		common/ac/errno.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/sub.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c find_libs/os.c
	mv os.$(OBJEXT) find_libs/os.$(OBJEXT)

fstrcmp/main.$(OBJEXT): fstrcmp/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/fstrcmp.h common/help.h \
		common/main.h common/noreturn.h common/progname.h \
		common/str.h common/sub.h common/version.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c fstrcmp/main.c
	mv main.$(OBJEXT) fstrcmp/main.$(OBJEXT)

lib/en/man1/.mandir: lib/en/.mandir
	-$(INSTALL) -m 0755 -d $(mandir)/man1
	@-test -d $(mandir)/man1 && touch $@
	@sleep 1

lib/en/.mandir:
	-$(INSTALL) -m 0755 -d $(mandir)
	@-test -d $(mandir) && touch $@
	@sleep 1

$(mandir)/man1/c_incl.1: lib/en/man1/c_incl.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/c_incl.1 $@

$(mandir)/man1/cook.1: lib/en/man1/cook.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cook.1 $@

$(mandir)/man1/cook_bom.1: lib/en/man1/cook_bom.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cook_bom.1 $@

$(mandir)/man1/cook_lic.1: lib/en/man1/cook_lic.1  lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cook_lic.1 $@

$(mandir)/man1/cook_rsh.1: lib/en/man1/cook_rsh.1 lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cook_rsh.1 $@

$(mandir)/man1/cookfp.1: lib/en/man1/cookfp.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cookfp.1 $@

$(mandir)/man1/cooktime.1: lib/en/man1/cooktime.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/cooktime.1 $@

$(mandir)/man1/find_libs.1: lib/en/man1/find_libs.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/find_libs.1 $@

$(mandir)/man1/make2cook.1: lib/en/man1/make2cook.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/make2cook.1 $@

$(mandir)/man1/roffpp.1: lib/en/man1/roffpp.1 etc/version.so \
		lib/en/man1/copyright.so lib/en/man1/o__rules.so \
		lib/en/man1/z_exit.so lib/en/man1/z_name.so \
		lib/en/man1/.mandir
	$(INSTALL_DATA) lib/en/man1/roffpp.1 $@

make2cook/blob.$(OBJEXT): make2cook/blob.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/mem.h \
		common/noreturn.h common/str.h common/sub.h \
		common/trace.h make2cook/blob.h make2cook/emit.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/blob.c
	mv blob.$(OBJEXT) make2cook/blob.$(OBJEXT)

make2cook/emit.$(OBJEXT): make2cook/emit.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/sub.h common/trace.h \
		make2cook/emit.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/emit.c
	mv emit.$(OBJEXT) make2cook/emit.$(OBJEXT)

make2cook/gram.yacc.c make2cook/gram.yacc.h: make2cook/gram.y
	$(YACC) -d make2cook/gram.y
	sed -e 's/yy\|YY_YY/gram_/g' y.tab.c > make2cook/gram.yacc.c
	sed -e 's/yy\|YY_YY/gram_/g' y.tab.h > make2cook/gram.yacc.h
	rm y.tab.c y.tab.h

make2cook/gram.yacc.$(OBJEXT): make2cook/gram.yacc.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/error_intl.h common/format_print.h common/main.h \
		common/noreturn.h common/str.h common/str_list.h \
		common/sub.h common/trace.h make2cook/blob.h \
		make2cook/gram.h make2cook/lex.h make2cook/stmt.h \
		make2cook/stmt/assign.h make2cook/stmt/blank.h \
		make2cook/stmt/command.h make2cook/stmt/comment.h \
		make2cook/stmt/compound.h make2cook/stmt/define.h \
		make2cook/stmt/export.h make2cook/stmt/if.h \
		make2cook/stmt/include.h make2cook/stmt/rule.h \
		make2cook/stmt/unexport.h make2cook/stmt/vpath.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/gram.yacc.c
	mv gram.yacc.$(OBJEXT) make2cook/gram.yacc.$(OBJEXT)

make2cook/lex.$(OBJEXT): make2cook/lex.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/input.h \
		common/input/file_text.h common/input/stdin.h \
		common/main.h common/mem.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h make2cook/blob.h \
		make2cook/gram.yacc.h make2cook/lex.h make2cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/lex.c
	mv lex.$(OBJEXT) make2cook/lex.$(OBJEXT)

make2cook/main.$(OBJEXT): make2cook/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/str_list.h common/sub.h common/version.h \
		make2cook/blob.h make2cook/emit.h make2cook/gram.h \
		make2cook/stmt.h make2cook/stmt/assign.h \
		make2cook/stmt/rule.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/main.c
	mv main.$(OBJEXT) make2cook/main.$(OBJEXT)

make2cook/stmt.$(OBJEXT): make2cook/stmt.c common/ac/stdarg.h \
		common/ac/stddef.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		common/trace.h make2cook/stmt.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt.c
	mv stmt.$(OBJEXT) make2cook/stmt.$(OBJEXT)

make2cook/stmt/assign.$(OBJEXT): make2cook/stmt/assign.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h common/trace.h \
		make2cook/blob.h make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/assign.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/assign.c
	mv assign.$(OBJEXT) make2cook/stmt/assign.$(OBJEXT)

make2cook/stmt/blank.$(OBJEXT): make2cook/stmt/blank.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h make2cook/stmt.h \
		make2cook/stmt/blank.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/blank.c
	mv blank.$(OBJEXT) make2cook/stmt/blank.$(OBJEXT)

make2cook/stmt/command.$(OBJEXT): make2cook/stmt/command.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/command.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/command.c
	mv command.$(OBJEXT) make2cook/stmt/command.$(OBJEXT)

make2cook/stmt/comment.$(OBJEXT): make2cook/stmt/comment.c \
		common/ac/ctype.h common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/comment.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/comment.c
	mv comment.$(OBJEXT) make2cook/stmt/comment.$(OBJEXT)

make2cook/stmt/compound.$(OBJEXT): make2cook/stmt/compound.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h common/trace.h \
		make2cook/stmt.h make2cook/stmt/compound.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/compound.c
	mv compound.$(OBJEXT) make2cook/stmt/compound.$(OBJEXT)

make2cook/stmt/define.$(OBJEXT): make2cook/stmt/define.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/define.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/define.c
	mv define.$(OBJEXT) make2cook/stmt/define.$(OBJEXT)

make2cook/stmt/export.$(OBJEXT): make2cook/stmt/export.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/export.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/export.c
	mv export.$(OBJEXT) make2cook/stmt/export.$(OBJEXT)

make2cook/stmt/if.$(OBJEXT): make2cook/stmt/if.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h make2cook/stmt/if.h \
		make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/if.c
	mv if.$(OBJEXT) make2cook/stmt/if.$(OBJEXT)

make2cook/stmt/include.$(OBJEXT): make2cook/stmt/include.c \
		common/ac/ctype.h common/ac/stdarg.h common/ac/stddef.h \
		common/ac/string.h common/format_print.h common/main.h \
		common/mem.h common/str.h common/str_list.h \
		make2cook/blob.h make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/include.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/include.c
	mv include.$(OBJEXT) make2cook/stmt/include.$(OBJEXT)

make2cook/stmt/rule.$(OBJEXT): make2cook/stmt/rule.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/string.h \
		common/format_print.h common/main.h common/mem.h \
		common/str.h common/str_list.h common/trace.h \
		make2cook/blob.h make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/command.h make2cook/stmt/compound.h \
		make2cook/stmt/rule.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/rule.c
	mv rule.$(OBJEXT) make2cook/stmt/rule.$(OBJEXT)

make2cook/stmt/unexport.$(OBJEXT): make2cook/stmt/unexport.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/symtab.h make2cook/blob.h \
		make2cook/emit.h make2cook/stmt.h \
		make2cook/stmt/unexport.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/unexport.c
	mv unexport.$(OBJEXT) make2cook/stmt/unexport.$(OBJEXT)

make2cook/stmt/vpath.$(OBJEXT): make2cook/stmt/vpath.c \
		common/ac/stdarg.h common/ac/stddef.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h make2cook/blob.h make2cook/stmt.h \
		make2cook/stmt/assign.h make2cook/stmt/vpath.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/stmt/vpath.c
	mv vpath.$(OBJEXT) make2cook/stmt/vpath.$(OBJEXT)

make2cook/vargram.yacc.c make2cook/vargram.yacc.h: make2cook/vargram.y
	$(YACC) -d make2cook/vargram.y
	sed -e 's/yy\|YY_YY/vargram_/g' y.tab.c > make2cook/vargram.yacc.c
	sed -e 's/yy\|YY_YY/vargram_/g' y.tab.h > make2cook/vargram.yacc.h
	rm y.tab.c y.tab.h

make2cook/vargram.yacc.$(OBJEXT): make2cook/vargram.yacc.c \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/string.h \
		common/format_print.h common/main.h common/str.h \
		common/str_list.h common/trace.h make2cook/blob.h \
		make2cook/vargram.h make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/vargram.yacc.c
	mv vargram.yacc.$(OBJEXT) make2cook/vargram.yacc.$(OBJEXT)

make2cook/variable.$(OBJEXT): make2cook/variable.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/string.h common/error_intl.h \
		common/format_print.h common/main.h common/noreturn.h \
		common/str.h common/str_list.h common/sub.h \
		common/symtab.h common/trace.h make2cook/blob.h \
		make2cook/vargram.h make2cook/vargram.yacc.h \
		make2cook/variable.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c make2cook/variable.c
	mv variable.$(OBJEXT) make2cook/variable.$(OBJEXT)

roffpp/main.$(OBJEXT): roffpp/main.c common/ac/stdarg.h \
		common/ac/stddef.h common/ac/stdio.h common/ac/stdlib.h \
		common/ac/string.h common/arglex.h common/error_intl.h \
		common/format_print.h common/help.h common/main.h \
		common/noreturn.h common/progname.h common/str.h \
		common/sub.h common/version.h roffpp/preprocess.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c roffpp/main.c
	mv main.$(OBJEXT) roffpp/main.$(OBJEXT)

roffpp/preprocess.$(OBJEXT): roffpp/preprocess.c common/ac/ctype.h \
		common/ac/stdarg.h common/ac/stddef.h common/ac/stdio.h \
		common/ac/stdlib.h common/ac/unistd.h \
		common/error_intl.h common/format_print.h common/input.h \
		common/input/file_text.h common/main.h common/mem.h \
		common/noreturn.h common/os_path_cat.h common/str.h \
		common/str_list.h common/sub.h common/trace.h \
		roffpp/preprocess.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -I. -c roffpp/preprocess.c
	mv preprocess.$(OBJEXT) roffpp/preprocess.$(OBJEXT)

script/cook_rsh: script/cook_rsh.in ./config.status
	CONFIG_FILES=$@:script/cook_rsh.in CONFIG_HEADERS= $(SH) \
		./config.status

bin/cook_rsh$(EXEEXT): script/cook_rsh .bin
	cp script/cook_rsh $@
	chmod a+rx $@

$(bindir)/$(PROGRAM_PREFIX)cook_rsh$(PROGRAM_SUFFIX)$(EXEEXT): \
		bin/cook_rsh$(EXEEXT) .bindir
	$(INSTALL_SCRIPT) bin/cook_rsh$(EXEEXT) $@

t0001a: test/00/t0001a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0001a.sh

t0002a: test/00/t0002a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0002a.sh

t0003a: test/00/t0003a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0003a.sh

t0004a: test/00/t0004a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0004a.sh

t0005a: test/00/t0005a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0005a.sh

t0006a: test/00/t0006a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0006a.sh

t0007a: test/00/t0007a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0007a.sh

t0008a: test/00/t0008a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0008a.sh

t0009a: test/00/t0009a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0009a.sh

t0010a: test/00/t0010a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0010a.sh

t0011a: test/00/t0011a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0011a.sh

t0012a: test/00/t0012a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0012a.sh

t0013a: test/00/t0013a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0013a.sh

t0014a: test/00/t0014a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0014a.sh

t0015a: test/00/t0015a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0015a.sh

t0016a: test/00/t0016a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0016a.sh

t0017a: test/00/t0017a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0017a.sh

t0018a: test/00/t0018a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0018a.sh

t0019a: test/00/t0019a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0019a.sh

t0020a: test/00/t0020a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0020a.sh

t0021a: test/00/t0021a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0021a.sh

t0022a: test/00/t0022a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0022a.sh

t0023a: test/00/t0023a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0023a.sh

t0024a: test/00/t0024a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0024a.sh

t0025a: test/00/t0025a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0025a.sh

t0026a: test/00/t0026a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0026a.sh

t0027a: test/00/t0027a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0027a.sh

t0028a: test/00/t0028a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0028a.sh

t0029a: test/00/t0029a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0029a.sh

t0031a: test/00/t0031a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0031a.sh

t0032a: test/00/t0032a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0032a.sh

t0033a: test/00/t0033a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0033a.sh

t0034a: test/00/t0034a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0034a.sh

t0035a: test/00/t0035a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0035a.sh

t0036a: test/00/t0036a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0036a.sh

t0037a: test/00/t0037a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0037a.sh

t0038a: test/00/t0038a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0038a.sh

t0039a: test/00/t0039a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0039a.sh

t0040a: test/00/t0040a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0040a.sh

t0041a: test/00/t0041a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0041a.sh

t0042a: test/00/t0042a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0042a.sh

t0043a: test/00/t0043a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0043a.sh

t0044a: test/00/t0044a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0044a.sh

t0045a: test/00/t0045a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0045a.sh

t0046a: test/00/t0046a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0046a.sh

t0047a: test/00/t0047a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0047a.sh

t0048a: test/00/t0048a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0048a.sh

t0049a: test/00/t0049a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0049a.sh

t0050a: test/00/t0050a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0050a.sh

t0051a: test/00/t0051a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0051a.sh

t0052a: test/00/t0052a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0052a.sh

t0053a: test/00/t0053a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0053a.sh

t0054a: test/00/t0054a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0054a.sh

t0055a: test/00/t0055a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0055a.sh

t0056a: test/00/t0056a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0056a.sh

t0057a: test/00/t0057a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0057a.sh

t0058a: test/00/t0058a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0058a.sh

t0059a: test/00/t0059a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0059a.sh

t0060a: test/00/t0060a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0060a.sh

t0061a: test/00/t0061a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0061a.sh

t0062a: test/00/t0062a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0062a.sh

t0063a: test/00/t0063a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0063a.sh

t0064a: test/00/t0064a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0064a.sh

t0065a: test/00/t0065a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0065a.sh

t0066a: test/00/t0066a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0066a.sh

t0067a: test/00/t0067a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0067a.sh

t0068a: test/00/t0068a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0068a.sh

t0069a: test/00/t0069a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0069a.sh

t0070a: test/00/t0070a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0070a.sh

t0071a: test/00/t0071a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0071a.sh

t0072a: test/00/t0072a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0072a.sh

t0073a: test/00/t0073a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0073a.sh

t0074a: test/00/t0074a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0074a.sh

t0075a: test/00/t0075a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0075a.sh

t0076a: test/00/t0076a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0076a.sh

t0077a: test/00/t0077a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0077a.sh

t0078a: test/00/t0078a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0078a.sh

t0079a: test/00/t0079a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0079a.sh

t0081a: test/00/t0081a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0081a.sh

t0082a: test/00/t0082a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0082a.sh

t0083a: test/00/t0083a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0083a.sh

t0084a: test/00/t0084a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0084a.sh

t0085a: test/00/t0085a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0085a.sh

t0086a: test/00/t0086a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0086a.sh

t0087a: test/00/t0087a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0087a.sh

t0088a: test/00/t0088a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0088a.sh

t0089a: test/00/t0089a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0089a.sh

t0090a: test/00/t0090a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0090a.sh

t0091a: test/00/t0091a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0091a.sh

t0092a: test/00/t0092a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0092a.sh

t0093a: test/00/t0093a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0093a.sh

t0094a: test/00/t0094a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0094a.sh

t0095a: test/00/t0095a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0095a.sh

t0096a: test/00/t0096a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0096a.sh

t0097a: test/00/t0097a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0097a.sh

t0098a: test/00/t0098a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0098a.sh

t0099a: test/00/t0099a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/00/t0099a.sh

t0100a: test/01/t0100a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0100a.sh

t0101a: test/01/t0101a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0101a.sh

t0102a: test/01/t0102a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0102a.sh

t0103a: test/01/t0103a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0103a.sh

t0104a: test/01/t0104a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0104a.sh

t0105a: test/01/t0105a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0105a.sh

t0106a: test/01/t0106a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0106a.sh

t0107a: test/01/t0107a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0107a.sh

t0108a: test/01/t0108a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0108a.sh

t0109a: test/01/t0109a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0109a.sh

t0111a: test/01/t0111a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0111a.sh

t0112a: test/01/t0112a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0112a.sh

t0113a: test/01/t0113a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0113a.sh

t0114a: test/01/t0114a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0114a.sh

t0115a: test/01/t0115a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0115a.sh

t0116a: test/01/t0116a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0116a.sh

t0117a: test/01/t0117a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0117a.sh

t0118a: test/01/t0118a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0118a.sh

t0119a: test/01/t0119a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0119a.sh

t0120a: test/01/t0120a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0120a.sh

t0121a: test/01/t0121a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0121a.sh

t0122a: test/01/t0122a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0122a.sh

t0123a: test/01/t0123a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0123a.sh

t0124a: test/01/t0124a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0124a.sh

t0125a: test/01/t0125a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0125a.sh

t0126a: test/01/t0126a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0126a.sh

t0127a: test/01/t0127a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0127a.sh

t0128a: test/01/t0128a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0128a.sh

t0129a: test/01/t0129a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0129a.sh

t0130a: test/01/t0130a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0130a.sh

t0131a: test/01/t0131a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0131a.sh

t0132a: test/01/t0132a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0132a.sh

t0133a: test/01/t0133a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0133a.sh

t0134a: test/01/t0134a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0134a.sh

t0135a: test/01/t0135a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0135a.sh

t0136a: test/01/t0136a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0136a.sh

t0137a: test/01/t0137a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0137a.sh

t0138a: test/01/t0138a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0138a.sh

t0139a: test/01/t0139a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0139a.sh

t0140a: test/01/t0140a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0140a.sh

t0141a: test/01/t0141a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0141a.sh

t0142a: test/01/t0142a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0142a.sh

t0144a: test/01/t0144a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0144a.sh

t0145a: test/01/t0145a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0145a.sh

t0146a: test/01/t0146a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0146a.sh

t0147a: test/01/t0147a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0147a.sh

t0148a: test/01/t0148a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0148a.sh

t0149a: test/01/t0149a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0149a.sh

t0150a: test/01/t0150a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0150a.sh

t0151a: test/01/t0151a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0151a.sh

t0152a: test/01/t0152a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0152a.sh

t0153a: test/01/t0153a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0153a.sh

t0154a: test/01/t0154a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0154a.sh

t0155a: test/01/t0155a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0155a.sh

t0156a: test/01/t0156a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0156a.sh

t0157a: test/01/t0157a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0157a.sh

t0158a: test/01/t0158a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0158a.sh

t0159a: test/01/t0159a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0159a.sh

t0160a: test/01/t0160a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0160a.sh

t0161a: test/01/t0161a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0161a.sh

t0162a: test/01/t0162a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0162a.sh

t0163a: test/01/t0163a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0163a.sh

t0164a: test/01/t0164a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0164a.sh

t0165a: test/01/t0165a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0165a.sh

t0166a: test/01/t0166a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0166a.sh

t0167a: test/01/t0167a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0167a.sh

t0168a: test/01/t0168a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0168a.sh

t0169a: test/01/t0169a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0169a.sh

t0170a: test/01/t0170a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0170a.sh

t0171a: test/01/t0171a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0171a.sh

t0172a: test/01/t0172a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0172a.sh

t0173a: test/01/t0173a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0173a.sh

t0175a: test/01/t0175a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0175a.sh

t0176a: test/01/t0176a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0176a.sh

t0177a: test/01/t0177a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0177a.sh

t0178a: test/01/t0178a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0178a.sh

t0179a: test/01/t0179a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0179a.sh

t0180a: test/01/t0180a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0180a.sh

t0181a: test/01/t0181a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0181a.sh

t0182a: test/01/t0182a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0182a.sh

t0183a: test/01/t0183a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0183a.sh

t0185a: test/01/t0185a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0185a.sh

t0186a: test/01/t0186a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0186a.sh

t0187a: test/01/t0187a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0187a.sh

t0188a: test/01/t0188a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0188a.sh

t0189a: test/01/t0189a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0189a.sh

t0190a: test/01/t0190a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0190a.sh

t0191a: test/01/t0191a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0191a.sh

t0193a: test/01/t0193a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0193a.sh

t0195a: test/01/t0195a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0195a.sh

t0196a: test/01/t0196a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0196a.sh

t0197a: test/01/t0197a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0197a.sh

t0198a: test/01/t0198a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0198a.sh

t0199a: test/01/t0199a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/01/t0199a.sh

t0200a: test/02/t0200a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0200a.sh

t0201a: test/02/t0201a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0201a.sh

t0202a: test/02/t0202a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0202a.sh

t0203a: test/02/t0203a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0203a.sh

t0205a: test/02/t0205a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0205a.sh

t0206a: test/02/t0206a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0206a.sh

t0208a: test/02/t0208a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0208a.sh

t0209a: test/02/t0209a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0209a.sh

t0210a: test/02/t0210a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0210a.sh

t0211a: test/02/t0211a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0211a.sh

t0212a: test/02/t0212a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0212a.sh

t0213a: test/02/t0213a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0213a.sh

t0215a: test/02/t0215a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0215a.sh

t0216a: test/02/t0216a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0216a.sh

t0217a: test/02/t0217a.sh all
	PATH=`pwd`/bin:$$PATH $(SH) test/02/t0217a.sh

lib_obj = common/ac/libintl.$(OBJEXT) common/ac/mntent.$(OBJEXT) \
		common/ac/stdio.$(OBJEXT) common/ac/stdlib.$(OBJEXT) \
		common/ac/string.$(OBJEXT) \
		common/ac/sys/utsname.$(OBJEXT) common/ac/time.$(OBJEXT) \
		common/ac/wchar.$(OBJEXT) common/ac/wctype.$(OBJEXT) \
		common/arglex.$(OBJEXT) common/env.$(OBJEXT) \
		common/error.$(OBJEXT) common/error_intl.$(OBJEXT) \
		common/error_intl/close.$(OBJEXT) \
		common/error_intl/open.$(OBJEXT) \
		common/error_intl/read.$(OBJEXT) \
		common/error_intl/stat.$(OBJEXT) \
		common/error_intl/unlink.$(OBJEXT) \
		common/error_intl/write.$(OBJEXT) \
		common/exeext.$(OBJEXT) common/fflush_slow.$(OBJEXT) \
		common/fp.$(OBJEXT) common/fp/cksum.$(OBJEXT) \
		common/fp/combined.$(OBJEXT) common/fp/crc32.$(OBJEXT) \
		common/fp/ident.$(OBJEXT) common/fp/len.$(OBJEXT) \
		common/fp/md5.$(OBJEXT) common/fp/snefru.$(OBJEXT) \
		common/fstrcmp.$(OBJEXT) common/gmatch.$(OBJEXT) \
		common/help.$(OBJEXT) common/home_directo.$(OBJEXT) \
		common/input.$(OBJEXT) common/input/crlf.$(OBJEXT) \
		common/input/file.$(OBJEXT) \
		common/input/file_text.$(OBJEXT) \
		common/input/null.$(OBJEXT) \
		common/input/private.$(OBJEXT) \
		common/input/pushba_trans.$(OBJEXT) \
		common/input/stdin.$(OBJEXT) common/itab.$(OBJEXT) \
		common/language.$(OBJEXT) common/libdir.$(OBJEXT) \
		common/mem.$(OBJEXT) common/mprintf.$(OBJEXT) \
		common/os_path_cat.$(OBJEXT) common/page.$(OBJEXT) \
		common/progname.$(OBJEXT) common/quit.$(OBJEXT) \
		common/star.$(OBJEXT) common/str.$(OBJEXT) \
		common/str/cat2.$(OBJEXT) common/str/cat3.$(OBJEXT) \
		common/str/downcase.$(OBJEXT) common/str/quote.$(OBJEXT) \
		common/str/re.$(OBJEXT) common/str/substitute.$(OBJEXT) \
		common/str/upcase.$(OBJEXT) common/str_list.$(OBJEXT) \
		common/stracc.$(OBJEXT) common/sub.$(OBJEXT) \
		common/sub/basename.$(OBJEXT) common/sub/date.$(OBJEXT) \
		common/sub/dirname.$(OBJEXT) \
		common/sub/downcase.$(OBJEXT) common/sub/errno.$(OBJEXT) \
		common/sub/expr.$(OBJEXT) \
		common/sub/expr_gram.yacc.$(OBJEXT) \
		common/sub/expr_lex.$(OBJEXT) common/sub/ident.$(OBJEXT) \
		common/sub/left.$(OBJEXT) common/sub/length.$(OBJEXT) \
		common/sub/plural.$(OBJEXT) \
		common/sub/progname.$(OBJEXT) common/sub/right.$(OBJEXT) \
		common/sub/upcase.$(OBJEXT) \
		common/sub/zero_pad.$(OBJEXT) common/symtab.$(OBJEXT) \
		common/timing.$(OBJEXT) common/trace.$(OBJEXT) \
		common/ts.$(OBJEXT) common/verbose.$(OBJEXT) \
		common/version-stmp.$(OBJEXT) common/version.$(OBJEXT) \
		common/wstr.$(OBJEXT) common/wstr_list.$(OBJEXT)

common/libcommon.a: $(lib_obj)
	rm -f $@
	$(AR) qc $@ $(lib_obj)
	$(RANLIB) $@

c_incl_obj = c_incl/cache.$(OBJEXT) c_incl/flatten.$(OBJEXT) \
		c_incl/lang.$(OBJEXT) c_incl/lang_c.$(OBJEXT) \
		c_incl/lang_m4.$(OBJEXT) c_incl/lang_optimis.$(OBJEXT) \
		c_incl/lang_roff.$(OBJEXT) c_incl/main.$(OBJEXT) \
		c_incl/os.$(OBJEXT) c_incl/sniff.$(OBJEXT) \
		c_incl/stripdot.$(OBJEXT)

bin/c_incl$(EXEEXT): $(c_incl_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(c_incl_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/c_incl$(EXEEXT): bin/c_incl$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/c_incl$(EXEEXT) $@

cook_obj = cook/archive.$(OBJEXT) cook/builtin.$(OBJEXT) \
		cook/builtin/addprefix.$(OBJEXT) \
		cook/builtin/addsuffix.$(OBJEXT) \
		cook/builtin/basename.$(OBJEXT) \
		cook/builtin/boolean.$(OBJEXT) \
		cook/builtin/cando.$(OBJEXT) \
		cook/builtin/collect.$(OBJEXT) \
		cook/builtin/cook.$(OBJEXT) \
		cook/builtin/defined.$(OBJEXT) \
		cook/builtin/dos.$(OBJEXT) \
		cook/builtin/execute.$(OBJEXT) \
		cook/builtin/exists.$(OBJEXT) \
		cook/builtin/expr.$(OBJEXT) \
		cook/builtin/expr_lex.$(OBJEXT) \
		cook/builtin/expr_parse.yacc.$(OBJEXT) \
		cook/builtin/filter_out.$(OBJEXT) \
		cook/builtin/find_command.$(OBJEXT) \
		cook/builtin/findstring.$(OBJEXT) \
		cook/builtin/getenv.$(OBJEXT) \
		cook/builtin/glob.$(OBJEXT) cook/builtin/home.$(OBJEXT) \
		cook/builtin/interi_files.$(OBJEXT) \
		cook/builtin/join.$(OBJEXT) cook/builtin/match.$(OBJEXT) \
		cook/builtin/mtime.$(OBJEXT) \
		cook/builtin/opsys.$(OBJEXT) \
		cook/builtin/options.$(OBJEXT) \
		cook/builtin/pathname.$(OBJEXT) \
		cook/builtin/positional.$(OBJEXT) \
		cook/builtin/print.$(OBJEXT) \
		cook/builtin/private.$(OBJEXT) \
		cook/builtin/read.$(OBJEXT) \
		cook/builtin/readlink.$(OBJEXT) \
		cook/builtin/relati_dirna.$(OBJEXT) \
		cook/builtin/resolve.$(OBJEXT) \
		cook/builtin/sort_newest.$(OBJEXT) \
		cook/builtin/split.$(OBJEXT) \
		cook/builtin/stringset.$(OBJEXT) \
		cook/builtin/strip.$(OBJEXT) \
		cook/builtin/stripdot.$(OBJEXT) \
		cook/builtin/strlen.$(OBJEXT) \
		cook/builtin/subst.$(OBJEXT) \
		cook/builtin/substr.$(OBJEXT) \
		cook/builtin/suffix.$(OBJEXT) \
		cook/builtin/text.$(OBJEXT) \
		cook/builtin/thread-id.$(OBJEXT) \
		cook/builtin/unsplit.$(OBJEXT) \
		cook/builtin/uptodate.$(OBJEXT) \
		cook/builtin/word.$(OBJEXT) \
		cook/builtin/wordlist.$(OBJEXT) \
		cook/builtin/write.$(OBJEXT) cook/cascade.$(OBJEXT) \
		cook/cook.$(OBJEXT) cook/desist.$(OBJEXT) \
		cook/dir_part.$(OBJEXT) cook/expr.$(OBJEXT) \
		cook/expr/catenate.$(OBJEXT) \
		cook/expr/constant.$(OBJEXT) \
		cook/expr/function.$(OBJEXT) cook/expr/list.$(OBJEXT) \
		cook/expr/position.$(OBJEXT) cook/fingerprint.$(OBJEXT) \
		cook/fingerprint/calc_string.$(OBJEXT) \
		cook/fingerprint/calculate.$(OBJEXT) \
		cook/fingerprint/filename.$(OBJEXT) \
		cook/fingerprint/find.$(OBJEXT) \
		cook/fingerprint/gram.yacc.$(OBJEXT) \
		cook/fingerprint/ingredients.$(OBJEXT) \
		cook/fingerprint/lex.$(OBJEXT) \
		cook/fingerprint/record.$(OBJEXT) \
		cook/fingerprint/subdir.$(OBJEXT) \
		cook/fingerprint/sync.$(OBJEXT) \
		cook/fingerprint/value.$(OBJEXT) cook/flag.$(OBJEXT) \
		cook/function.$(OBJEXT) cook/graph.$(OBJEXT) \
		cook/graph/build.$(OBJEXT) cook/graph/check.$(OBJEXT) \
		cook/graph/edge_type.$(OBJEXT) cook/graph/file.$(OBJEXT) \
		cook/graph/file_list.$(OBJEXT) \
		cook/graph/file_pair.$(OBJEXT) cook/graph/leaf.$(OBJEXT) \
		cook/graph/pairs.$(OBJEXT) cook/graph/recipe.$(OBJEXT) \
		cook/graph/recipe_list.$(OBJEXT) \
		cook/graph/run.$(OBJEXT) cook/graph/script.$(OBJEXT) \
		cook/graph/stats.$(OBJEXT) cook/graph/walk.$(OBJEXT) \
		cook/graph/web.$(OBJEXT) cook/hashline.yacc.$(OBJEXT) \
		cook/id.$(OBJEXT) cook/id/builtin.$(OBJEXT) \
		cook/id/function.$(OBJEXT) cook/id/global.$(OBJEXT) \
		cook/id/nothing.$(OBJEXT) cook/id/private.$(OBJEXT) \
		cook/id/variable.$(OBJEXT) cook/lex.$(OBJEXT) \
		cook/lex/filename.$(OBJEXT) \
		cook/lex/filenamelist.$(OBJEXT) cook/listing.$(OBJEXT) \
		cook/main.$(OBJEXT) cook/match.$(OBJEXT) \
		cook/match/cook.$(OBJEXT) cook/match/new.$(OBJEXT) \
		cook/match/new_by_recip.$(OBJEXT) \
		cook/match/private.$(OBJEXT) cook/match/regex.$(OBJEXT) \
		cook/match/stack.$(OBJEXT) cook/match/wl.$(OBJEXT) \
		cook/meter.$(OBJEXT) cook/opcode.$(OBJEXT) \
		cook/opcode/assign.$(OBJEXT) \
		cook/opcode/assign_appen.$(OBJEXT) \
		cook/opcode/assign_local.$(OBJEXT) \
		cook/opcode/cascade.$(OBJEXT) \
		cook/opcode/catenate.$(OBJEXT) \
		cook/opcode/command.$(OBJEXT) \
		cook/opcode/context.$(OBJEXT) cook/opcode/fail.$(OBJEXT) \
		cook/opcode/function.$(OBJEXT) \
		cook/opcode/gosub.$(OBJEXT) cook/opcode/goto.$(OBJEXT) \
		cook/opcode/jmpf.$(OBJEXT) cook/opcode/jmpt.$(OBJEXT) \
		cook/opcode/label.$(OBJEXT) cook/opcode/list.$(OBJEXT) \
		cook/opcode/postlude.$(OBJEXT) \
		cook/opcode/prelude.$(OBJEXT) \
		cook/opcode/private.$(OBJEXT) cook/opcode/push.$(OBJEXT) \
		cook/opcode/recipe.$(OBJEXT) cook/opcode/set.$(OBJEXT) \
		cook/opcode/setenv.$(OBJEXT) \
		cook/opcode/setenv_appen.$(OBJEXT) \
		cook/opcode/status.$(OBJEXT) \
		cook/opcode/string.$(OBJEXT) \
		cook/opcode/thread-id.$(OBJEXT) \
		cook/opcode/touch.$(OBJEXT) \
		cook/opcode/unsetenv.$(OBJEXT) cook/option.$(OBJEXT) \
		cook/os.$(OBJEXT) cook/os/below_dir.$(OBJEXT) \
		cook/os/dirnam_relat.$(OBJEXT) \
		cook/os/pathname.$(OBJEXT) cook/os/rel_if_poss.$(OBJEXT) \
		cook/os/symlink.$(OBJEXT) cook/os/wait.$(OBJEXT) \
		cook/parse.yacc.$(OBJEXT) cook/recipe.$(OBJEXT) \
		cook/recipe/list.$(OBJEXT) cook/stat.cache.$(OBJEXT) \
		cook/stmt.$(OBJEXT) cook/stmt/append.$(OBJEXT) \
		cook/stmt/assign.$(OBJEXT) cook/stmt/command.$(OBJEXT) \
		cook/stmt/compound.$(OBJEXT) cook/stmt/fail.$(OBJEXT) \
		cook/stmt/gosub.$(OBJEXT) cook/stmt/if.$(OBJEXT) \
		cook/stmt/list.$(OBJEXT) cook/stmt/loop.$(OBJEXT) \
		cook/stmt/loopvar.$(OBJEXT) cook/stmt/nop.$(OBJEXT) \
		cook/stmt/recipe.$(OBJEXT) cook/stmt/return.$(OBJEXT) \
		cook/stmt/set.$(OBJEXT) cook/stmt/touch.$(OBJEXT) \
		cook/stmt/unsetenv.$(OBJEXT) cook/strip_dot.$(OBJEXT) \
		cook/tempfilename.$(OBJEXT)

bin/cook$(EXEEXT): $(cook_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(cook_obj) common/libcommon.a \
		$(LIBS)

$(bindir)/cook$(EXEEXT): bin/cook$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/cook$(EXEEXT) $@

cook_bom_obj = cook_bom/main.$(OBJEXT) cook_bom/sniff.$(OBJEXT)

bin/cook_bom$(EXEEXT): $(cook_bom_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(cook_bom_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/cook_bom$(EXEEXT): bin/cook_bom$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/cook_bom$(EXEEXT) $@

cookfp_obj = cookfp/main.$(OBJEXT)

bin/cookfp$(EXEEXT): $(cookfp_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(cookfp_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/cookfp$(EXEEXT): bin/cookfp$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/cookfp$(EXEEXT) $@

cooktime_obj = cooktime/date.yacc.$(OBJEXT) cooktime/main.$(OBJEXT)

bin/cooktime$(EXEEXT): $(cooktime_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(cooktime_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/cooktime$(EXEEXT): bin/cooktime$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/cooktime$(EXEEXT) $@

file_check_obj = file_check/file_check.$(OBJEXT) \
		file_check/main.$(OBJEXT)

bin/file_check$(EXEEXT): $(file_check_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(file_check_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/file_check$(EXEEXT): bin/file_check$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/file_check$(EXEEXT) $@

find_libs_obj = find_libs/main.$(OBJEXT) find_libs/os.$(OBJEXT)

bin/find_libs$(EXEEXT): $(find_libs_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(find_libs_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/find_libs$(EXEEXT): bin/find_libs$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/find_libs$(EXEEXT) $@

fstrcmp_obj = fstrcmp/main.$(OBJEXT)

bin/fstrcmp$(EXEEXT): $(fstrcmp_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(fstrcmp_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/fstrcmp$(EXEEXT): bin/fstrcmp$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/fstrcmp$(EXEEXT) $@

make2cook_obj = make2cook/blob.$(OBJEXT) make2cook/emit.$(OBJEXT) \
		make2cook/gram.yacc.$(OBJEXT) make2cook/lex.$(OBJEXT) \
		make2cook/main.$(OBJEXT) make2cook/stmt.$(OBJEXT) \
		make2cook/stmt/assign.$(OBJEXT) \
		make2cook/stmt/blank.$(OBJEXT) \
		make2cook/stmt/command.$(OBJEXT) \
		make2cook/stmt/comment.$(OBJEXT) \
		make2cook/stmt/compound.$(OBJEXT) \
		make2cook/stmt/define.$(OBJEXT) \
		make2cook/stmt/export.$(OBJEXT) \
		make2cook/stmt/if.$(OBJEXT) \
		make2cook/stmt/include.$(OBJEXT) \
		make2cook/stmt/rule.$(OBJEXT) \
		make2cook/stmt/unexport.$(OBJEXT) \
		make2cook/stmt/vpath.$(OBJEXT) \
		make2cook/vargram.yacc.$(OBJEXT) \
		make2cook/variable.$(OBJEXT)

bin/make2cook$(EXEEXT): $(make2cook_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(make2cook_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/make2cook$(EXEEXT): bin/make2cook$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/make2cook$(EXEEXT) $@

roffpp_obj = roffpp/main.$(OBJEXT) roffpp/preprocess.$(OBJEXT)

bin/roffpp$(EXEEXT): $(roffpp_obj) common/libcommon.a .bin
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $(roffpp_obj) \
		common/libcommon.a $(LIBS)

$(bindir)/roffpp$(EXEEXT): bin/roffpp$(EXEEXT) .bindir
	$(INSTALL_PROGRAM) bin/roffpp$(EXEEXT) $@

all: all-bin
all-bin: bin/c_incl$(EXEEXT) bin/cook$(EXEEXT) bin/cook_bom$(EXEEXT) \
		bin/cook_rsh$(EXEEXT) bin/cookfp$(EXEEXT) \
		bin/cooktime$(EXEEXT) bin/file_check$(EXEEXT) \
		bin/find_libs$(EXEEXT) bin/fstrcmp$(EXEEXT) \
		bin/make2cook$(EXEEXT) bin/roffpp$(EXEEXT)

.bin:
	-mkdir bin
	-chmod 0755 bin
	@-test -d bin && touch $@
	@sleep 1

.bindir:
	-$(INSTALL) -m 0755 -d $(bindir)
	@-test -d $(bindir) && touch $@
	@sleep 1

check: sure

sure: \
t0001a \
t0002a \
t0003a \
t0004a \
t0005a \
t0006a \
t0007a \
t0008a \
t0009a \
t0010a \
t0011a \
t0012a \
t0013a \
t0014a \
t0015a \
t0016a \
t0017a \
t0018a \
t0019a \
t0020a \
t0021a \
t0022a \
t0023a \
t0024a \
t0025a \
t0026a \
t0027a \
t0028a \
t0029a \
t0031a \
t0032a \
t0033a \
t0034a \
t0035a \
t0036a \
t0037a \
t0038a \
t0039a \
t0040a \
t0041a \
t0042a \
t0043a \
t0044a \
t0045a \
t0046a \
t0047a \
t0048a \
t0049a \
t0050a \
t0051a \
t0052a \
t0053a \
t0054a \
t0055a \
t0056a \
t0057a \
t0058a \
t0059a \
t0060a \
t0061a \
t0062a \
t0063a \
t0064a \
t0065a \
t0066a \
t0067a \
t0068a \
t0069a \
t0070a \
t0071a \
t0072a \
t0073a \
t0074a \
t0075a \
t0076a \
t0077a \
t0078a \
t0079a \
t0081a \
t0082a \
t0083a \
t0084a \
t0085a \
t0086a \
t0087a \
t0088a \
t0089a \
t0090a \
t0091a \
t0092a \
t0093a \
t0094a \
t0095a \
t0096a \
t0097a \
t0098a \
t0099a \
t0100a \
t0101a \
t0102a \
t0103a \
t0104a \
t0105a \
t0106a \
t0107a \
t0108a \
t0109a \
t0111a \
t0112a \
t0113a \
t0114a \
t0115a \
t0116a \
t0117a \
t0118a \
t0119a \
t0120a \
t0121a \
t0122a \
t0123a \
t0124a \
t0125a \
t0126a \
t0127a \
t0128a \
t0129a \
t0130a \
t0131a \
t0132a \
t0133a \
t0134a \
t0135a \
t0136a \
t0137a \
t0138a \
t0139a \
t0140a \
t0141a \
t0142a \
t0144a \
t0145a \
t0146a \
t0147a \
t0148a \
t0149a \
t0150a \
t0151a \
t0152a \
t0153a \
t0154a \
t0155a \
t0156a \
t0157a \
t0158a \
t0159a \
t0160a \
t0161a \
t0162a \
t0163a \
t0164a \
t0165a \
t0166a \
t0167a \
t0168a \
t0169a \
t0170a \
t0171a \
t0172a \
t0173a \
t0175a \
t0176a \
t0177a \
t0178a \
t0179a \
t0180a \
t0181a \
t0182a \
t0183a \
t0185a \
t0186a \
t0187a \
t0188a \
t0189a \
t0190a \
t0191a \
t0193a \
t0195a \
t0196a \
t0197a \
t0198a \
t0199a \
t0200a \
t0201a \
t0202a \
t0203a \
t0205a \
t0206a \
t0208a \
t0209a \
t0210a \
t0211a \
t0212a \
t0213a \
t0215a \
t0216a \
t0217a
	@echo Passed All Tests

clean-obj:
	rm -f .bin
	rm -f .bindir
	rm -f 'bin/cook_rsh$(EXEEXT)'
	rm -f 'c_incl/cache.$(OBJEXT)'
	rm -f 'c_incl/flatten.$(OBJEXT)'
	rm -f 'c_incl/lang.$(OBJEXT)'
	rm -f 'c_incl/lang_c.$(OBJEXT)'
	rm -f 'c_incl/lang_m4.$(OBJEXT)'
	rm -f 'c_incl/lang_optimis.$(OBJEXT)'
	rm -f 'c_incl/lang_roff.$(OBJEXT)'
	rm -f 'c_incl/main.$(OBJEXT)'
	rm -f 'c_incl/os.$(OBJEXT)'
	rm -f 'c_incl/sniff.$(OBJEXT)'
	rm -f 'c_incl/stripdot.$(OBJEXT)'
	rm -f 'common/ac/libintl.$(OBJEXT)'
	rm -f 'common/ac/mntent.$(OBJEXT)'
	rm -f 'common/ac/stdio.$(OBJEXT)'
	rm -f 'common/ac/stdlib.$(OBJEXT)'
	rm -f 'common/ac/string.$(OBJEXT)'
	rm -f 'common/ac/sys/utsname.$(OBJEXT)'
	rm -f 'common/ac/time.$(OBJEXT)'
	rm -f 'common/ac/wchar.$(OBJEXT)'
	rm -f 'common/ac/wctype.$(OBJEXT)'
	rm -f 'common/arglex.$(OBJEXT)'
	rm -f 'common/env.$(OBJEXT)'
	rm -f 'common/error.$(OBJEXT)'
	rm -f 'common/error_intl.$(OBJEXT)'
	rm -f 'common/error_intl/close.$(OBJEXT)'
	rm -f 'common/error_intl/open.$(OBJEXT)'
	rm -f 'common/error_intl/read.$(OBJEXT)'
	rm -f 'common/error_intl/stat.$(OBJEXT)'
	rm -f 'common/error_intl/unlink.$(OBJEXT)'
	rm -f 'common/error_intl/write.$(OBJEXT)'
	rm -f 'common/exeext.$(OBJEXT)'
	rm -f 'common/fflush_slow.$(OBJEXT)'
	rm -f 'common/fp.$(OBJEXT)'
	rm -f 'common/fp/cksum.$(OBJEXT)'
	rm -f 'common/fp/combined.$(OBJEXT)'
	rm -f 'common/fp/crc32.$(OBJEXT)'
	rm -f 'common/fp/ident.$(OBJEXT)'
	rm -f 'common/fp/len.$(OBJEXT)'
	rm -f 'common/fp/md5.$(OBJEXT)'
	rm -f 'common/fp/snefru.$(OBJEXT)'
	rm -f 'common/fstrcmp.$(OBJEXT)'
	rm -f 'common/gmatch.$(OBJEXT)'
	rm -f 'common/help.$(OBJEXT)'
	rm -f 'common/home_directo.$(OBJEXT)'
	rm -f 'common/input.$(OBJEXT)'
	rm -f 'common/input/crlf.$(OBJEXT)'
	rm -f 'common/input/file.$(OBJEXT)'
	rm -f 'common/input/file_text.$(OBJEXT)'
	rm -f 'common/input/null.$(OBJEXT)'
	rm -f 'common/input/private.$(OBJEXT)'
	rm -f 'common/input/pushba_trans.$(OBJEXT)'
	rm -f 'common/input/stdin.$(OBJEXT)'
	rm -f 'common/itab.$(OBJEXT)'
	rm -f 'common/language.$(OBJEXT)'
	rm -f common/libcommon.a
	rm -f 'common/libdir.$(OBJEXT)'
	rm -f 'common/mem.$(OBJEXT)'
	rm -f 'common/mprintf.$(OBJEXT)'
	rm -f 'common/os_path_cat.$(OBJEXT)'
	rm -f 'common/page.$(OBJEXT)'
	rm -f 'common/progname.$(OBJEXT)'
	rm -f 'common/quit.$(OBJEXT)'
	rm -f 'common/star.$(OBJEXT)'
	rm -f 'common/str.$(OBJEXT)'
	rm -f 'common/str/cat2.$(OBJEXT)'
	rm -f 'common/str/cat3.$(OBJEXT)'
	rm -f 'common/str/downcase.$(OBJEXT)'
	rm -f 'common/str/quote.$(OBJEXT)'
	rm -f 'common/str/re.$(OBJEXT)'
	rm -f 'common/str/substitute.$(OBJEXT)'
	rm -f 'common/str/upcase.$(OBJEXT)'
	rm -f 'common/str_list.$(OBJEXT)'
	rm -f 'common/stracc.$(OBJEXT)'
	rm -f 'common/sub.$(OBJEXT)'
	rm -f 'common/sub/basename.$(OBJEXT)'
	rm -f 'common/sub/date.$(OBJEXT)'
	rm -f 'common/sub/dirname.$(OBJEXT)'
	rm -f 'common/sub/downcase.$(OBJEXT)'
	rm -f 'common/sub/errno.$(OBJEXT)'
	rm -f 'common/sub/expr.$(OBJEXT)'
	rm -f 'common/sub/expr_gram.yacc.$(OBJEXT)'
	rm -f common/sub/expr_gram.yacc.c
	rm -f common/sub/expr_gram.yacc.cc
	rm -f common/sub/expr_gram.yacc.h
	rm -f 'common/sub/expr_lex.$(OBJEXT)'
	rm -f 'common/sub/ident.$(OBJEXT)'
	rm -f 'common/sub/left.$(OBJEXT)'
	rm -f 'common/sub/length.$(OBJEXT)'
	rm -f 'common/sub/plural.$(OBJEXT)'
	rm -f 'common/sub/progname.$(OBJEXT)'
	rm -f 'common/sub/right.$(OBJEXT)'
	rm -f 'common/sub/upcase.$(OBJEXT)'
	rm -f 'common/sub/zero_pad.$(OBJEXT)'
	rm -f 'common/symtab.$(OBJEXT)'
	rm -f 'common/timing.$(OBJEXT)'
	rm -f 'common/trace.$(OBJEXT)'
	rm -f 'common/ts.$(OBJEXT)'
	rm -f 'common/verbose.$(OBJEXT)'
	rm -f 'common/version-stmp.$(OBJEXT)'
	rm -f 'common/version.$(OBJEXT)'
	rm -f 'common/wstr.$(OBJEXT)'
	rm -f 'common/wstr_list.$(OBJEXT)'
	rm -f 'cook/archive.$(OBJEXT)'
	rm -f 'cook/builtin.$(OBJEXT)'
	rm -f 'cook/builtin/addprefix.$(OBJEXT)'
	rm -f 'cook/builtin/addsuffix.$(OBJEXT)'
	rm -f 'cook/builtin/basename.$(OBJEXT)'
	rm -f 'cook/builtin/boolean.$(OBJEXT)'
	rm -f 'cook/builtin/cando.$(OBJEXT)'
	rm -f 'cook/builtin/collect.$(OBJEXT)'
	rm -f 'cook/builtin/cook.$(OBJEXT)'
	rm -f 'cook/builtin/defined.$(OBJEXT)'
	rm -f 'cook/builtin/dos.$(OBJEXT)'
	rm -f 'cook/builtin/execute.$(OBJEXT)'
	rm -f 'cook/builtin/exists.$(OBJEXT)'
	rm -f 'cook/builtin/expr.$(OBJEXT)'
	rm -f 'cook/builtin/expr_lex.$(OBJEXT)'
	rm -f 'cook/builtin/expr_parse.yacc.$(OBJEXT)'
	rm -f cook/builtin/expr_parse.yacc.c
	rm -f cook/builtin/expr_parse.yacc.cc
	rm -f cook/builtin/expr_parse.yacc.h
	rm -f 'cook/builtin/filter_out.$(OBJEXT)'
	rm -f 'cook/builtin/find_command.$(OBJEXT)'
	rm -f 'cook/builtin/findstring.$(OBJEXT)'
	rm -f 'cook/builtin/getenv.$(OBJEXT)'
	rm -f 'cook/builtin/glob.$(OBJEXT)'
	rm -f 'cook/builtin/home.$(OBJEXT)'
	rm -f 'cook/builtin/interi_files.$(OBJEXT)'
	rm -f 'cook/builtin/join.$(OBJEXT)'
	rm -f 'cook/builtin/match.$(OBJEXT)'
	rm -f 'cook/builtin/mtime.$(OBJEXT)'
	rm -f 'cook/builtin/opsys.$(OBJEXT)'
	rm -f 'cook/builtin/options.$(OBJEXT)'
	rm -f 'cook/builtin/pathname.$(OBJEXT)'
	rm -f 'cook/builtin/positional.$(OBJEXT)'
	rm -f 'cook/builtin/print.$(OBJEXT)'
	rm -f 'cook/builtin/private.$(OBJEXT)'
	rm -f 'cook/builtin/read.$(OBJEXT)'
	rm -f 'cook/builtin/readlink.$(OBJEXT)'
	rm -f 'cook/builtin/relati_dirna.$(OBJEXT)'
	rm -f 'cook/builtin/resolve.$(OBJEXT)'
	rm -f 'cook/builtin/sort_newest.$(OBJEXT)'
	rm -f 'cook/builtin/split.$(OBJEXT)'
	rm -f 'cook/builtin/stringset.$(OBJEXT)'
	rm -f 'cook/builtin/strip.$(OBJEXT)'
	rm -f 'cook/builtin/stripdot.$(OBJEXT)'
	rm -f 'cook/builtin/strlen.$(OBJEXT)'
	rm -f 'cook/builtin/subst.$(OBJEXT)'
	rm -f 'cook/builtin/substr.$(OBJEXT)'
	rm -f 'cook/builtin/suffix.$(OBJEXT)'
	rm -f 'cook/builtin/text.$(OBJEXT)'
	rm -f 'cook/builtin/thread-id.$(OBJEXT)'
	rm -f 'cook/builtin/unsplit.$(OBJEXT)'
	rm -f 'cook/builtin/uptodate.$(OBJEXT)'
	rm -f 'cook/builtin/word.$(OBJEXT)'
	rm -f 'cook/builtin/wordlist.$(OBJEXT)'
	rm -f 'cook/builtin/write.$(OBJEXT)'
	rm -f 'cook/cascade.$(OBJEXT)'
	rm -f 'cook/cook.$(OBJEXT)'
	rm -f 'cook/desist.$(OBJEXT)'
	rm -f 'cook/dir_part.$(OBJEXT)'
	rm -f 'cook/expr.$(OBJEXT)'
	rm -f 'cook/expr/catenate.$(OBJEXT)'
	rm -f 'cook/expr/constant.$(OBJEXT)'
	rm -f 'cook/expr/function.$(OBJEXT)'
	rm -f 'cook/expr/list.$(OBJEXT)'
	rm -f 'cook/expr/position.$(OBJEXT)'
	rm -f 'cook/fingerprint.$(OBJEXT)'
	rm -f 'cook/fingerprint/calc_string.$(OBJEXT)'
	rm -f 'cook/fingerprint/calculate.$(OBJEXT)'
	rm -f 'cook/fingerprint/filename.$(OBJEXT)'
	rm -f 'cook/fingerprint/find.$(OBJEXT)'
	rm -f 'cook/fingerprint/gram.yacc.$(OBJEXT)'
	rm -f cook/fingerprint/gram.yacc.c
	rm -f cook/fingerprint/gram.yacc.cc
	rm -f cook/fingerprint/gram.yacc.h
	rm -f 'cook/fingerprint/ingredients.$(OBJEXT)'
	rm -f 'cook/fingerprint/lex.$(OBJEXT)'
	rm -f 'cook/fingerprint/record.$(OBJEXT)'
	rm -f 'cook/fingerprint/subdir.$(OBJEXT)'
	rm -f 'cook/fingerprint/sync.$(OBJEXT)'
	rm -f 'cook/fingerprint/value.$(OBJEXT)'
	rm -f 'cook/flag.$(OBJEXT)'
	rm -f 'cook/function.$(OBJEXT)'
	rm -f 'cook/graph.$(OBJEXT)'
	rm -f 'cook/graph/build.$(OBJEXT)'
	rm -f 'cook/graph/check.$(OBJEXT)'
	rm -f 'cook/graph/edge_type.$(OBJEXT)'
	rm -f 'cook/graph/file.$(OBJEXT)'
	rm -f 'cook/graph/file_list.$(OBJEXT)'
	rm -f 'cook/graph/file_pair.$(OBJEXT)'
	rm -f 'cook/graph/leaf.$(OBJEXT)'
	rm -f 'cook/graph/pairs.$(OBJEXT)'
	rm -f 'cook/graph/recipe.$(OBJEXT)'
	rm -f 'cook/graph/recipe_list.$(OBJEXT)'
	rm -f 'cook/graph/run.$(OBJEXT)'
	rm -f 'cook/graph/script.$(OBJEXT)'
	rm -f 'cook/graph/stats.$(OBJEXT)'
	rm -f 'cook/graph/walk.$(OBJEXT)'
	rm -f 'cook/graph/web.$(OBJEXT)'
	rm -f 'cook/hashline.yacc.$(OBJEXT)'
	rm -f cook/hashline.yacc.c
	rm -f cook/hashline.yacc.cc
	rm -f cook/hashline.yacc.h
	rm -f 'cook/id.$(OBJEXT)'
	rm -f 'cook/id/builtin.$(OBJEXT)'
	rm -f 'cook/id/function.$(OBJEXT)'
	rm -f 'cook/id/global.$(OBJEXT)'
	rm -f 'cook/id/nothing.$(OBJEXT)'
	rm -f 'cook/id/private.$(OBJEXT)'
	rm -f 'cook/id/variable.$(OBJEXT)'
	rm -f 'cook/lex.$(OBJEXT)'
	rm -f 'cook/lex/filename.$(OBJEXT)'
	rm -f 'cook/lex/filenamelist.$(OBJEXT)'
	rm -f 'cook/listing.$(OBJEXT)'
	rm -f 'cook/main.$(OBJEXT)'
	rm -f 'cook/match.$(OBJEXT)'
	rm -f 'cook/match/cook.$(OBJEXT)'
	rm -f 'cook/match/new.$(OBJEXT)'
	rm -f 'cook/match/new_by_recip.$(OBJEXT)'
	rm -f 'cook/match/private.$(OBJEXT)'
	rm -f 'cook/match/regex.$(OBJEXT)'
	rm -f 'cook/match/stack.$(OBJEXT)'
	rm -f 'cook/match/wl.$(OBJEXT)'
	rm -f 'cook/meter.$(OBJEXT)'
	rm -f 'cook/opcode.$(OBJEXT)'
	rm -f 'cook/opcode/assign.$(OBJEXT)'
	rm -f 'cook/opcode/assign_appen.$(OBJEXT)'
	rm -f 'cook/opcode/assign_local.$(OBJEXT)'
	rm -f 'cook/opcode/cascade.$(OBJEXT)'
	rm -f 'cook/opcode/catenate.$(OBJEXT)'
	rm -f 'cook/opcode/command.$(OBJEXT)'
	rm -f 'cook/opcode/context.$(OBJEXT)'
	rm -f 'cook/opcode/fail.$(OBJEXT)'
	rm -f 'cook/opcode/function.$(OBJEXT)'
	rm -f 'cook/opcode/gosub.$(OBJEXT)'
	rm -f 'cook/opcode/goto.$(OBJEXT)'
	rm -f 'cook/opcode/jmpf.$(OBJEXT)'
	rm -f 'cook/opcode/jmpt.$(OBJEXT)'
	rm -f 'cook/opcode/label.$(OBJEXT)'
	rm -f 'cook/opcode/list.$(OBJEXT)'
	rm -f 'cook/opcode/postlude.$(OBJEXT)'
	rm -f 'cook/opcode/prelude.$(OBJEXT)'
	rm -f 'cook/opcode/private.$(OBJEXT)'
	rm -f 'cook/opcode/push.$(OBJEXT)'
	rm -f 'cook/opcode/recipe.$(OBJEXT)'
	rm -f 'cook/opcode/set.$(OBJEXT)'
	rm -f 'cook/opcode/setenv.$(OBJEXT)'
	rm -f 'cook/opcode/setenv_appen.$(OBJEXT)'
	rm -f 'cook/opcode/status.$(OBJEXT)'
	rm -f 'cook/opcode/string.$(OBJEXT)'
	rm -f 'cook/opcode/thread-id.$(OBJEXT)'
	rm -f 'cook/opcode/touch.$(OBJEXT)'
	rm -f 'cook/opcode/unsetenv.$(OBJEXT)'
	rm -f 'cook/option.$(OBJEXT)'
	rm -f 'cook/os.$(OBJEXT)'
	rm -f 'cook/os/below_dir.$(OBJEXT)'
	rm -f 'cook/os/dirnam_relat.$(OBJEXT)'
	rm -f 'cook/os/pathname.$(OBJEXT)'
	rm -f 'cook/os/rel_if_poss.$(OBJEXT)'
	rm -f 'cook/os/symlink.$(OBJEXT)'
	rm -f 'cook/os/wait.$(OBJEXT)'
	rm -f 'cook/parse.yacc.$(OBJEXT)'
	rm -f cook/parse.yacc.c
	rm -f cook/parse.yacc.cc
	rm -f cook/parse.yacc.h
	rm -f 'cook/recipe.$(OBJEXT)'
	rm -f 'cook/recipe/list.$(OBJEXT)'
	rm -f 'cook/stat.cache.$(OBJEXT)'
	rm -f 'cook/stmt.$(OBJEXT)'
	rm -f 'cook/stmt/append.$(OBJEXT)'
	rm -f 'cook/stmt/assign.$(OBJEXT)'
	rm -f 'cook/stmt/command.$(OBJEXT)'
	rm -f 'cook/stmt/compound.$(OBJEXT)'
	rm -f 'cook/stmt/fail.$(OBJEXT)'
	rm -f 'cook/stmt/gosub.$(OBJEXT)'
	rm -f 'cook/stmt/if.$(OBJEXT)'
	rm -f 'cook/stmt/list.$(OBJEXT)'
	rm -f 'cook/stmt/loop.$(OBJEXT)'
	rm -f 'cook/stmt/loopvar.$(OBJEXT)'
	rm -f 'cook/stmt/nop.$(OBJEXT)'
	rm -f 'cook/stmt/recipe.$(OBJEXT)'
	rm -f 'cook/stmt/return.$(OBJEXT)'
	rm -f 'cook/stmt/set.$(OBJEXT)'
	rm -f 'cook/stmt/touch.$(OBJEXT)'
	rm -f 'cook/stmt/unsetenv.$(OBJEXT)'
	rm -f 'cook/strip_dot.$(OBJEXT)'
	rm -f 'cook/tempfilename.$(OBJEXT)'
	rm -f 'cook_bom/main.$(OBJEXT)'
	rm -f 'cook_bom/sniff.$(OBJEXT)'
	rm -f 'cookfp/main.$(OBJEXT)'
	rm -f 'cooktime/date.yacc.$(OBJEXT)'
	rm -f cooktime/date.yacc.c
	rm -f cooktime/date.yacc.cc
	rm -f cooktime/date.yacc.h
	rm -f 'cooktime/main.$(OBJEXT)'
	rm -f core
	rm -f datadir/.datadir
	rm -f 'file_check/file_check.$(OBJEXT)'
	rm -f 'file_check/main.$(OBJEXT)'
	rm -f 'find_libs/main.$(OBJEXT)'
	rm -f 'find_libs/os.$(OBJEXT)'
	rm -f 'fstrcmp/main.$(OBJEXT)'
	rm -f lib/en/.mandir
	rm -f lib/en/man1/.mandir
	rm -f 'make2cook/blob.$(OBJEXT)'
	rm -f 'make2cook/emit.$(OBJEXT)'
	rm -f 'make2cook/gram.yacc.$(OBJEXT)'
	rm -f make2cook/gram.yacc.c
	rm -f make2cook/gram.yacc.cc
	rm -f make2cook/gram.yacc.h
	rm -f 'make2cook/lex.$(OBJEXT)'
	rm -f 'make2cook/main.$(OBJEXT)'
	rm -f 'make2cook/stmt.$(OBJEXT)'
	rm -f 'make2cook/stmt/assign.$(OBJEXT)'
	rm -f 'make2cook/stmt/blank.$(OBJEXT)'
	rm -f 'make2cook/stmt/command.$(OBJEXT)'
	rm -f 'make2cook/stmt/comment.$(OBJEXT)'
	rm -f 'make2cook/stmt/compound.$(OBJEXT)'
	rm -f 'make2cook/stmt/define.$(OBJEXT)'
	rm -f 'make2cook/stmt/export.$(OBJEXT)'
	rm -f 'make2cook/stmt/if.$(OBJEXT)'
	rm -f 'make2cook/stmt/include.$(OBJEXT)'
	rm -f 'make2cook/stmt/rule.$(OBJEXT)'
	rm -f 'make2cook/stmt/unexport.$(OBJEXT)'
	rm -f 'make2cook/stmt/vpath.$(OBJEXT)'
	rm -f 'make2cook/vargram.yacc.$(OBJEXT)'
	rm -f make2cook/vargram.yacc.c
	rm -f make2cook/vargram.yacc.cc
	rm -f make2cook/vargram.yacc.h
	rm -f 'make2cook/variable.$(OBJEXT)'
	rm -f 'roffpp/main.$(OBJEXT)'
	rm -f 'roffpp/preprocess.$(OBJEXT)'
	rm -f y.output
	rm -f y.tab.c
	rm -f y.tab.h

clean: clean-obj
	rm -f 'bin/c_incl$(EXEEXT)'
	rm -f 'bin/cook$(EXEEXT)'
	rm -f 'bin/cook_bom$(EXEEXT)'
	rm -f 'bin/cook_rsh$(EXEEXT)'
	rm -f 'bin/cookfp$(EXEEXT)'
	rm -f 'bin/cooktime$(EXEEXT)'
	rm -f 'bin/file_check$(EXEEXT)'
	rm -f 'bin/find_libs$(EXEEXT)'
	rm -f 'bin/fstrcmp$(EXEEXT)'
	rm -f 'bin/make2cook$(EXEEXT)'
	rm -f 'bin/roffpp$(EXEEXT)'

distclean: clean
	rm -f Makefile
	rm -f common/config.h
	rm -f config.cache
	rm -f config.log
	rm -f config.status
	rm -f etc/Howto.conf
	rm -f etc/libdir-h
	rm -f etc/libdir.so
	rm -f script/cook_rsh
	rm -rf bin

install-bin: \
		$(bindir)/$(PROGRAM_PREFIX)cook_rsh$(PROGRAM_SUFFIX)$(EXEEXT) \
		$(bindir)/c_incl $(bindir)/cook $(bindir)/cook_bom \
		$(bindir)/cookfp $(bindir)/cooktime $(bindir)/file_check \
		$(bindir)/find_libs $(bindir)/fstrcmp \
		$(bindir)/make2cook $(bindir)/roffpp

install-man: $(mandir)/man1/c_incl.1 $(mandir)/man1/cook.1 \
		$(mandir)/man1/cook_bom.1 $(mandir)/man1/cook_lic.1 \
		$(mandir)/man1/cook_rsh.1 $(mandir)/man1/cookfp.1 \
		$(mandir)/man1/cooktime.1 $(mandir)/man1/find_libs.1 \
		$(mandir)/man1/make2cook.1 $(mandir)/man1/roffpp.1

install-datadir: $(DATADIR)/as $(DATADIR)/bison $(DATADIR)/c \
		$(DATADIR)/c++ $(DATADIR)/f77 $(DATADIR)/functions \
		$(DATADIR)/g77 $(DATADIR)/gcc $(DATADIR)/home \
		$(DATADIR)/host_lists.pl $(DATADIR)/java $(DATADIR)/lex \
		$(DATADIR)/library $(DATADIR)/print $(DATADIR)/program \
		$(DATADIR)/rcs $(DATADIR)/recursive $(DATADIR)/sccs \
		$(DATADIR)/text $(DATADIR)/usr $(DATADIR)/usr.local \
		$(DATADIR)/yacc $(DATADIR)/yacc_many

install: install-bin install-man install-datadir
